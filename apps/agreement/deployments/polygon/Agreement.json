{
  "address": "0x41B0039fcC760B8899b3D11e954A7A7B5dfC9E4c",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "canPerformChallenge",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputable",
          "type": "address"
        },
        {
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "name": "_challengeDuration",
          "type": "uint64"
        },
        {
          "name": "_actionAmount",
          "type": "uint256"
        },
        {
          "name": "_challengeAmount",
          "type": "uint256"
        }
      ],
      "name": "changeCollateralRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "name": "lastSettingIdSigned",
          "type": "uint256"
        },
        {
          "name": "mustSign",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_challengeId",
          "type": "uint256"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "name": "actionId",
          "type": "uint256"
        },
        {
          "name": "challenger",
          "type": "address"
        },
        {
          "name": "endDate",
          "type": "uint64"
        },
        {
          "name": "context",
          "type": "bytes"
        },
        {
          "name": "settlementOffer",
          "type": "uint256"
        },
        {
          "name": "state",
          "type": "uint8"
        },
        {
          "name": "submitterFinishedEvidence",
          "type": "bool"
        },
        {
          "name": "challengerFinishedEvidence",
          "type": "bool"
        },
        {
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputable",
          "type": "address"
        },
        {
          "name": "_collateralRequirementId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralRequirement",
      "outputs": [
        {
          "name": "collateralToken",
          "type": "address"
        },
        {
          "name": "challengeDuration",
          "type": "uint64"
        },
        {
          "name": "actionAmount",
          "type": "uint256"
        },
        {
          "name": "challengeAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stakingFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "_how",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MANAGE_DISPUTABLE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "name": "_setAppFeesCashier",
          "type": "bool"
        },
        {
          "name": "_title",
          "type": "string"
        },
        {
          "name": "_content",
          "type": "bytes"
        },
        {
          "name": "_stakingFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "name": "_submitterFinishedEvidence",
          "type": "bool"
        }
      ],
      "name": "disputeAction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_settingId",
          "type": "uint256"
        }
      ],
      "name": "sign",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "canUnlock",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "name": "_settlementOffer",
          "type": "uint256"
        },
        {
          "name": "_finishedEvidence",
          "type": "bool"
        },
        {
          "name": "_context",
          "type": "bytes"
        }
      ],
      "name": "challengeAction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableAddress",
          "type": "address"
        },
        {
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "name": "_challengeDuration",
          "type": "uint64"
        },
        {
          "name": "_actionAmount",
          "type": "uint256"
        },
        {
          "name": "_challengeAmount",
          "type": "uint256"
        }
      ],
      "name": "activate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "closeAction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "canRuleDispute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "settleAction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableAddress",
          "type": "address"
        }
      ],
      "name": "deactivate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_settingId",
          "type": "uint256"
        }
      ],
      "name": "getSetting",
      "outputs": [
        {
          "name": "arbitrator",
          "type": "address"
        },
        {
          "name": "aragonAppFeesCashier",
          "type": "address"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "content",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "name": "_setAppFeesCashier",
          "type": "bool"
        },
        {
          "name": "_title",
          "type": "string"
        },
        {
          "name": "_content",
          "type": "bytes"
        }
      ],
      "name": "changeSetting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "canChallenge",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "canClose",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "closeEvidencePeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHALLENGE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "canDispute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentSettingId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "getAction",
      "outputs": [
        {
          "name": "disputable",
          "type": "address"
        },
        {
          "name": "disputableActionId",
          "type": "uint256"
        },
        {
          "name": "collateralRequirementId",
          "type": "uint256"
        },
        {
          "name": "settingId",
          "type": "uint256"
        },
        {
          "name": "submitter",
          "type": "address"
        },
        {
          "name": "closed",
          "type": "bool"
        },
        {
          "name": "context",
          "type": "bytes"
        },
        {
          "name": "lastChallengeId",
          "type": "uint256"
        },
        {
          "name": "lastChallengeActive",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputable",
          "type": "address"
        }
      ],
      "name": "getDisputableInfo",
      "outputs": [
        {
          "name": "activated",
          "type": "bool"
        },
        {
          "name": "currentCollateralRequirementId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_evidence",
          "type": "bytes"
        },
        {
          "name": "_finished",
          "type": "bool"
        }
      ],
      "name": "submitEvidence",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "syncAppFeesCashier",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_AGREEMENT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "canClaimSettlement",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_actionId",
          "type": "uint256"
        }
      ],
      "name": "canSettle",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        },
        {
          "name": "_context",
          "type": "bytes"
        },
        {
          "name": "_submitter",
          "type": "address"
        }
      ],
      "name": "newAction",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_challengeId",
          "type": "uint256"
        }
      ],
      "name": "getChallengeArbitratorFees",
      "outputs": [
        {
          "name": "submitterArbitratorFeesToken",
          "type": "address"
        },
        {
          "name": "submitterArbitratorFeesAmount",
          "type": "uint256"
        },
        {
          "name": "challengerArbitratorFeesToken",
          "type": "address"
        },
        {
          "name": "challengerArbitratorFeesAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "settingId",
          "type": "uint256"
        }
      ],
      "name": "Signed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "settingId",
          "type": "uint256"
        }
      ],
      "name": "SettingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newAppFeesCashier",
          "type": "address"
        }
      ],
      "name": "AppFeesCashierSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "disputable",
          "type": "address"
        }
      ],
      "name": "DisputableAppActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "disputable",
          "type": "address"
        }
      ],
      "name": "DisputableAppDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "disputable",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "collateralRequirementId",
          "type": "uint256"
        }
      ],
      "name": "CollateralRequirementChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "disputable",
          "type": "address"
        }
      ],
      "name": "ActionSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        }
      ],
      "name": "ActionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ActionChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ActionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ActionDisputed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ActionAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ActionVoided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ActionRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "submitter",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "evidence",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "finished",
          "type": "bool"
        }
      ],
      "name": "EvidenceSubmitted",
      "type": "event"
    }
  ],
  "transactionHash": "0x8d5e2df8787f80cca5c2c5bbd03ef1b9dbe2fcb259a9c22bb070cdbcc51380c0",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB24b54FE5a3ADcB4cb3B27d31B6C7f7E9F6A73a7",
    "contractAddress": null,
    "transactionIndex": 16,
    "gasUsed": "5227775",
    "logsBloom": "0x
    "blockHash": "0xcc3c582d17272612e173d47885125c3b9e7c8ea4a89005b0613d17e8ab86cb7e",
    "transactionHash": "0x8d5e2df8787f80cca5c2c5bbd03ef1b9dbe2fcb259a9c22bb070cdbcc51380c0",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 14513631,
        "transactionHash": "0x8d5e2df8787f80cca5c2c5bbd03ef1b9dbe2fcb259a9c22bb070cdbcc51380c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b24b54fe5a3adcb4cb3b27d31b6c7f7e9f6a73a7",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004a4a88df5cd80000000000000000000000000000000000000000000000000023d47df428caac0000000000000000000000000000000000000000000000006d2226871a8be45a80000000000000000000000000000000000000000000000000238a336b496dd40000000000000000000000000000000000000000000000006d2270d1a36b413280",
        "logIndex": 18,
        "blockHash": "0xcc3c582d17272612e173d47885125c3b9e7c8ea4a89005b0613d17e8ab86cb7e"
      }
    ],
    "blockNumber": 14513631,
    "cumulativeGasUsed": "6399003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "68b5e6a4da474054341c26f114a2ffd3",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"canPerformChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputable\",\"type\":\"address\"},{\"name\":\"_collateralToken\",\"type\":\"address\"},{\"name\":\"_challengeDuration\",\"type\":\"uint64\"},{\"name\":\"_actionAmount\",\"type\":\"uint256\"},{\"name\":\"_challengeAmount\",\"type\":\"uint256\"}],\"name\":\"changeCollateralRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"lastSettingIdSigned\",\"type\":\"uint256\"},{\"name\":\"mustSign\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallenge\",\"outputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"},{\"name\":\"challenger\",\"type\":\"address\"},{\"name\":\"endDate\",\"type\":\"uint64\"},{\"name\":\"context\",\"type\":\"bytes\"},{\"name\":\"settlementOffer\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"submitterFinishedEvidence\",\"type\":\"bool\"},{\"name\":\"challengerFinishedEvidence\",\"type\":\"bool\"},{\"name\":\"disputeId\",\"type\":\"uint256\"},{\"name\":\"ruling\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputable\",\"type\":\"address\"},{\"name\":\"_collateralRequirementId\",\"type\":\"uint256\"}],\"name\":\"getCollateralRequirement\",\"outputs\":[{\"name\":\"collateralToken\",\"type\":\"address\"},{\"name\":\"challengeDuration\",\"type\":\"uint64\"},{\"name\":\"actionAmount\",\"type\":\"uint256\"},{\"name\":\"challengeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_DISPUTABLE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_setAppFeesCashier\",\"type\":\"bool\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_content\",\"type\":\"bytes\"},{\"name\":\"_stakingFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"},{\"name\":\"_submitterFinishedEvidence\",\"type\":\"bool\"}],\"name\":\"disputeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"},{\"name\":\"_settlementOffer\",\"type\":\"uint256\"},{\"name\":\"_finishedEvidence\",\"type\":\"bool\"},{\"name\":\"_context\",\"type\":\"bytes\"}],\"name\":\"challengeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableAddress\",\"type\":\"address\"},{\"name\":\"_collateralToken\",\"type\":\"address\"},{\"name\":\"_challengeDuration\",\"type\":\"uint64\"},{\"name\":\"_actionAmount\",\"type\":\"uint256\"},{\"name\":\"_challengeAmount\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"closeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canRuleDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"settleAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableAddress\",\"type\":\"address\"}],\"name\":\"deactivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSetting\",\"outputs\":[{\"name\":\"arbitrator\",\"type\":\"address\"},{\"name\":\"aragonAppFeesCashier\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_setAppFeesCashier\",\"type\":\"bool\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"changeSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"closeEvidencePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHALLENGE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSettingId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"getAction\",\"outputs\":[{\"name\":\"disputable\",\"type\":\"address\"},{\"name\":\"disputableActionId\",\"type\":\"uint256\"},{\"name\":\"collateralRequirementId\",\"type\":\"uint256\"},{\"name\":\"settingId\",\"type\":\"uint256\"},{\"name\":\"submitter\",\"type\":\"address\"},{\"name\":\"closed\",\"type\":\"bool\"},{\"name\":\"context\",\"type\":\"bytes\"},{\"name\":\"lastChallengeId\",\"type\":\"uint256\"},{\"name\":\"lastChallengeActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputable\",\"type\":\"address\"}],\"name\":\"getDisputableInfo\",\"outputs\":[{\"name\":\"activated\",\"type\":\"bool\"},{\"name\":\"currentCollateralRequirementId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_evidence\",\"type\":\"bytes\"},{\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"syncAppFeesCashier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_AGREEMENT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canClaimSettlement\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionId\",\"type\":\"uint256\"}],\"name\":\"canSettle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"},{\"name\":\"_context\",\"type\":\"bytes\"},{\"name\":\"_submitter\",\"type\":\"address\"}],\"name\":\"newAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallengeArbitratorFees\",\"outputs\":[{\"name\":\"submitterArbitratorFeesToken\",\"type\":\"address\"},{\"name\":\"submitterArbitratorFeesAmount\",\"type\":\"uint256\"},{\"name\":\"challengerArbitratorFeesToken\",\"type\":\"address\"},{\"name\":\"challengerArbitratorFeesAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"settingId\",\"type\":\"uint256\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"settingId\",\"type\":\"uint256\"}],\"name\":\"SettingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAppFeesCashier\",\"type\":\"address\"}],\"name\":\"AppFeesCashierSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"}],\"name\":\"DisputableAppActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"}],\"name\":\"DisputableAppDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateralRequirementId\",\"type\":\"uint256\"}],\"name\":\"CollateralRequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"disputable\",\"type\":\"address\"}],\"name\":\"ActionSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"ActionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionVoided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ActionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ruling\",\"type\":\"uint256\"}],\"name\":\"Ruled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"evidence\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"EvidenceSubmitted\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"activate(address,address,uint64,uint256,uint256)\":{\"details\":\"Initialization check is implicitly provided by the `auth()` modifier\",\"params\":{\"_actionAmount\":\"Amount of collateral tokens that will be locked every time an action is submitted\",\"_challengeAmount\":\"Amount of collateral tokens that will be locked every time an action is challenged\",\"_challengeDuration\":\"Challenge duration, during which the submitter can raise a dispute\",\"_collateralToken\":\"Address of the ERC20 token to be used for collateral\",\"_disputableAddress\":\"Address of the Disputable app\"}},\"allowRecoverability(address)\":{\"details\":\"Disable built-in AragonApp token recovery escape hatch.     This app is intended to hold users' funds and we do not want to allow them to be transferred to the default vault.\",\"return\":\"Always false\"},\"canChallenge(uint256)\":{\"details\":\"Tell whether an action can be challenged\",\"params\":{\"_actionId\":\"Identification number of the action\"},\"return\":\"True if the action can be challenged, false otherwise\"},\"canClaimSettlement(uint256)\":{\"details\":\"Tell whether an action can be settled by claiming its challenge settlement\",\"params\":{\"_actionId\":\"Identification number of the action\"},\"return\":\"True if the action settlement can be claimed, false otherwise\"},\"canClose(uint256)\":{\"details\":\"Tell whether an action can be manually closed.     An action can be closed if it is allowed to:      - Proceed in the context of this Agreement (see `_canProceed()`), and      - Be closed in the context of the originating Disputable app\",\"params\":{\"_actionId\":\"Identification number of the action\"},\"return\":\"True if the action can be closed, false otherwise\"},\"canDispute(uint256)\":{\"details\":\"Tell whether an action can be disputed\",\"params\":{\"_actionId\":\"Identification number of the action\"},\"return\":\"True if the action can be disputed, false otherwise\"},\"canPerform(address,address,bytes32,uint256[])\":{\"details\":\"ACL oracle interface conformance\",\"return\":\"True if a parameterized address has signed the current version of the Agreement, false otherwise\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"canPerformChallenge(uint256,address)\":{\"details\":\"Tell whether an address can challenge an action\",\"params\":{\"_actionId\":\"Identification number of the action\",\"_challenger\":\"Address of the challenger\"},\"return\":\"True if the challenger can challenge the action, false otherwise\"},\"canRuleDispute(uint256)\":{\"details\":\"Tell whether an action's dispute can be ruled\",\"params\":{\"_actionId\":\"Identification number of the action\"},\"return\":\"True if the action's dispute can be ruled, false otherwise\"},\"canSettle(uint256)\":{\"details\":\"Tell whether an action can be settled\",\"params\":{\"_actionId\":\"Identification number of the action\"},\"return\":\"True if the action can be settled, false otherwise\"},\"canUnlock(address,uint256)\":{\"details\":\"ILockManager conformance.     The Staking contract checks this on each request to unlock an amount managed by this Agreement.     It always returns false to disable owners from unlocking their funds arbitrarily, as we     want to control the release of the locked amount when actions are closed or settled.\",\"return\":\"Whether the request to unlock tokens of a given owner should be allowed\"},\"challengeAction(uint256,uint256,bool,bytes)\":{\"details\":\"This is only callable by those who hold the CHALLENGE_ROLE on the related Disputable app.     Can be called multiple times per action, until a challenge is successful (settled or ruled for challenger).     Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\",\"params\":{\"_actionId\":\"Identification number of the action to be challenged\",\"_context\":\"Link to a human-readable context for the challenge\",\"_finishedEvidence\":\"Whether the challenger is finished submitting evidence with the challenge context\",\"_settlementOffer\":\"Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\"}},\"changeCollateralRequirement(address,address,uint64,uint256,uint256)\":{\"details\":\"Initialization check is implicitly provided by the `auth()` modifier\",\"params\":{\"_actionAmount\":\"Amount of collateral tokens that will be locked every time an action is submitted\",\"_challengeAmount\":\"Amount of collateral tokens that will be locked every time an action is challenged\",\"_challengeDuration\":\"Challenge duration, during which the submitter can raise a dispute\",\"_collateralToken\":\"Address of the ERC20 token to be used for collateral\",\"_disputable\":\"Address of the Disputable app\"}},\"changeSetting(address,bool,string,bytes)\":{\"details\":\"Initialization check is implicitly provided by the `auth()` modifier\",\"params\":{\"_arbitrator\":\"Address of the IArbitrator that will be used to resolve disputes\",\"_content\":\"Link to a human-readable text that describes the new rules for the Agreement\",\"_setAppFeesCashier\":\"Whether to integrate with the IArbitrator's fee cashier\",\"_title\":\"String indicating a short description\"}},\"closeAction(uint256)\":{\"details\":\"This function closes actions that:     - Are not currently challenged nor disputed, or     - Were previously disputed but ruled in favour of the submitter or voided     Disputable apps may call this method directly at the end of an action, but is also accessible in a permission-less manner     in case the app does not close its own actions automatically (e.g. disputable votes that don't pass).     Can be called multiple times; it does nothing if the action is already closed.     Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\",\"params\":{\"_actionId\":\"Identification number of the action to be closed\"}},\"closeEvidencePeriod(uint256)\":{\"details\":\"Callable by any account.     Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\",\"params\":{\"_disputeId\":\"Identification number of the dispute on the arbitrator\"}},\"deactivate(address)\":{\"details\":\"Initialization check is implicitly provided by the `auth()` modifier\",\"params\":{\"_disputableAddress\":\"Address of the Disputable app to be deactivated\"}},\"disputeAction(uint256,bool)\":{\"details\":\"Only the action submitter can create a dispute for an action with an open challenge.     Can only be called once (if at all) per opened challenge.     Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\",\"params\":{\"_actionId\":\"Identification number of the action to be disputed\",\"_submitterFinishedEvidence\":\"Whether the submitter was finished submitting evidence with their action context\"}},\"getAction(uint256)\":{\"details\":\"Tell the information related to an action\",\"params\":{\"_actionId\":\"Identification number of the action\"},\"return\":\"disputable Address of the Disputable app that created the actiondisputableActionId Identification number of the action on the Disputable appcollateralRequirementId Identification number of the collateral requirement applicable to the actionsettingId Identification number of the agreement setting applicable to the actionsubmitter Address that submitted the actionclosed Whether the action is closedcontext Link to a human-readable context for the actionlastChallengeId Identification number of the action's most recent challenge, if anylastChallengeActive Whether the action's most recent challenge is still ongoing\"},\"getChallenge(uint256)\":{\"details\":\"Tell the information related to an action challenge\",\"params\":{\"_challengeId\":\"Identification number of the challenge\"},\"return\":\"actionId Identification number of the action associated to the challengechallenger Address that challenged the actionendDate Datetime of the last date the submitter can raise a dispute against the challengecontext Link to a human-readable context for the challengesettlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitratorstate Current state of the challengesubmitterFinishedEvidence Whether the action submitter has finished submitting evidence for the associated disputechallengerFinishedEvidence Whether the action challenger has finished submitting evidence for the associated disputedisputeId Identification number of the associated dispute on the arbitratorruling Ruling given from the arbitrator for the dispute\"},\"getChallengeArbitratorFees(uint256)\":{\"details\":\"Tell the arbitration fees paid for an action challenge     Split from `getChallenge()` due to \\u201cstack too deep issues\\u201d\",\"params\":{\"_challengeId\":\"Identification number of the challenge\"},\"return\":\"submitterArbitratorFeesToken ERC20 token used for the arbitration fees paid by the submitter (on dispute creation)submitterArbitratorFeesAmount Amount of arbitration fees paid by the submitter (on dispute creation)challengerArbitratorFeesToken ERC20 token used for the arbitration fees paid by the challenger (in advance)challengerArbitratorFeesAmount Amount of arbitration fees paid by the challenger (in advance)\"},\"getCollateralRequirement(address,uint256)\":{\"details\":\"Tell the information related to a collateral requirement of a Disputable app\",\"params\":{\"_collateralRequirementId\":\"Identification number of the collateral requirement\",\"_disputable\":\"Address of the Disputable app\"},\"return\":\"collateralToken Address of the ERC20 token to be used for collateralactionAmount Amount of collateral tokens that will be locked every time an action is createdchallengeAmount Amount of collateral tokens that will be locked every time an action is challengedchallengeDuration Challenge duration, during which the submitter can raise a dispute\"},\"getCurrentSettingId()\":{\"details\":\"Tell the identification number of the current agreement setting\",\"return\":\"Identification number of the current agreement setting\"},\"getDisputableInfo(address)\":{\"details\":\"Tell the information related to a Disputable app\",\"params\":{\"_disputable\":\"Address of the Disputable app\"},\"return\":\"activated Whether the Disputable app is activecurrentCollateralRequirementId Identification number of the current collateral requirement\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"getSetting(uint256)\":{\"details\":\"Tell the information related to an agreement setting\",\"params\":{\"_settingId\":\"Identification number of the agreement setting\"},\"return\":\"arbitrator Address of the IArbitrator that will be used to resolve disputesaragonAppFeesCashier Address of the fees cashier to deposit action fees (linked to the selected arbitrator)title String indicating a short descriptioncontent Link to a human-readable text that describes the current rules for the Agreement\"},\"getSigner(address)\":{\"details\":\"Tell the information related to a signer\",\"params\":{\"_signer\":\"Address of signer\"},\"return\":\"lastSettingIdSigned Identification number of the last agreement setting signed by the signermustSign Whether the requested signer needs to sign the current agreement setting before submitting an action\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"initialize(address,bool,string,bytes,address)\":{\"params\":{\"_arbitrator\":\"Address of the IArbitrator that will be used to resolve disputes\",\"_content\":\"Link to a human-readable text that describes the initial rules for the Agreement\",\"_setAppFeesCashier\":\"Whether to integrate with the IArbitrator's fee cashier\",\"_stakingFactory\":\"Staking factory for finding each collateral token's staking pool\",\"_title\":\"String indicating a short description\"}},\"newAction(uint256,bytes,address)\":{\"details\":\"This function should be called from the Disputable app each time a new disputable action is created.     Each disputable action ID must only be registered once; this is how the Agreement gets notified about each disputable action.     Initialization check is implicitly provided by `_ensureActiveDisputable()` as Disputable apps can only be activated     via `activate()` which already requires initialization.     IMPORTANT: Note the responsibility of the Disputable app in terms of providing the correct `_submitter` parameter.     Users are required to trust that all Disputable apps activated with this Agreement have implemented this correctly, as     otherwise funds could be maliciously locked from the incorrect account on new actions.\",\"params\":{\"_context\":\"Link to a human-readable context for the given action\",\"_disputableActionId\":\"Identification number of the action on the Disputable app\",\"_submitter\":\"Address that submitted the action\"},\"return\":\"Unique identification number for the created action on the Agreement\"},\"rule(uint256,uint256)\":{\"details\":\"Can only be called once per challenge by the associated abitrator.     Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\",\"params\":{\"_disputeId\":\"Identification number of the dispute on the arbitrator\",\"_ruling\":\"Ruling given by the arbitrator\"}},\"settleAction(uint256)\":{\"details\":\"This can be accessed by both the submitter (at any time) or any account (after the settlement period has passed).     Can only be called once (if at all) per opened challenge.     Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\",\"params\":{\"_actionId\":\"Identification number of the action to be settled\"}},\"sign(uint256)\":{\"details\":\"Callable by any account; only accounts that have signed the latest version of the agreement can submit new disputable actions.     Initialization check is implicitly provided by `_settingId < nextSettingId`, as valid settings can only be created after initialization.\",\"params\":{\"_settingId\":\"Last setting ID the user is agreeing with\"}},\"submitEvidence(uint256,bytes,bool)\":{\"details\":\"Only callable by the action submitter or challenger.     Can be called as many times as desired until the dispute is over.     Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\",\"params\":{\"_disputeId\":\"Identification number of the dispute on the arbitrator\",\"_evidence\":\"Evidence data to be submitted\",\"_finished\":\"Whether the evidence submitter is now finished submitting evidence\"}},\"supportsInterface(bytes4)\":{\"details\":\"Query if a contract implements a certain interface\",\"params\":{\"_interfaceId\":\"The interface identifier being queried, as specified in ERC-165\"},\"return\":\"True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\"},\"syncAppFeesCashier()\":{\"details\":\"The app fees cashier address is being cached in the contract to save gas.     This can be called permission-lessly to allow any account to re-sync the cashier when changed by the arbitrator.     Initialization check is implicitly provided by `_getSetting()`, as valid settings can only be created after initialization.\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"activate(address,address,uint64,uint256,uint256)\":{\"notice\":\"Activate Disputable app `_disputableAddress`\"},\"canPerform(address,address,bytes32,uint256[])\":{\"notice\":\"Tells whether an address has already signed the Agreement\"},\"challengeAction(uint256,uint256,bool,bytes)\":{\"notice\":\"Challenge action #`_actionId`\"},\"changeCollateralRequirement(address,address,uint64,uint256,uint256)\":{\"notice\":\"Change `_disputable`'s collateral requirements\"},\"changeSetting(address,bool,string,bytes)\":{\"notice\":\"Update Agreement to title \\\"`_title`\\\" and content \\\"`_content`\\\", with arbitrator `_arbitrator`\"},\"closeAction(uint256)\":{\"notice\":\"Close action #`_actionId`\"},\"closeEvidencePeriod(uint256)\":{\"notice\":\"Close evidence submission period for dispute #`_disputeId`\"},\"deactivate(address)\":{\"notice\":\"Deactivate Disputable app `_disputable`\"},\"disputeAction(uint256,bool)\":{\"notice\":\"Dispute challenged action #`_actionId`, raising it to the arbitrator\"},\"initialize(address,bool,string,bytes,address)\":{\"notice\":\"Initialize Agreement for \\\"`_title`\\\" and content \\\"`_content`\\\", with arbitrator `_arbitrator` and staking factory `_factory`\"},\"newAction(uint256,bytes,address)\":{\"notice\":\"Register action #`_disputableActionId` from disputable `msg.sender` for submitter `_submitter` with context `_context`\"},\"rule(uint256,uint256)\":{\"notice\":\"Rule the action associated to dispute #`_disputeId` with ruling `_ruling`\"},\"settleAction(uint256)\":{\"notice\":\"Settle challenged action #`_actionId`, accepting the settlement offer\"},\"sign(uint256)\":{\"notice\":\"Sign the agreement up-to setting #`_settingId`\"},\"submitEvidence(uint256,bytes,bool)\":{\"notice\":\"Submit evidence for dispute #`_disputeId`\"},\"syncAppFeesCashier()\":{\"notice\":\"Sync app fees cashier address\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Agreement.sol\":\"Agreement\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACLOracle {\\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x76b78ed68eafa0e3c9a4a9e4151f136f13dbcca0ac65cc43501db7b6a1189867\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAragonApp.sol\\\";\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage is IAragonApp {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x57f490644a5acb26fca0b4cb2cc7f52e64b0dbe9ca5d111f7c1b4e5250ed93ad\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../lib/standards/ERC165.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xa6c2ed08d7df92bf791ff85ecc9e400a874acfa6a7d961fa07e9175fb77231f4\"},\"@aragon/os/contracts/apps/IAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract IAragonApp {\\n    // Includes appId and kernel methods:\\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\\n\\n    function kernel() public view returns (IKernel);\\n    function appId() public view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdf64e62d609623a151c233b5f473f385117d68172aa2bf1ac4dc5cd8c5a3fc5b\"},\"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAgreement.sol\\\";\\nimport \\\"./IDisputable.sol\\\";\\nimport \\\"../AragonApp.sol\\\";\\nimport \\\"../../lib/math/SafeMath64.sol\\\";\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract DisputableAragonApp is IDisputable, AragonApp {\\n    /* Validation errors */\\n    string internal constant ERROR_SENDER_NOT_AGREEMENT = \\\"DISPUTABLE_SENDER_NOT_AGREEMENT\\\";\\n    string internal constant ERROR_AGREEMENT_STATE_INVALID = \\\"DISPUTABLE_AGREEMENT_STATE_INVAL\\\";\\n\\n    // This role is used to protect who can challenge actions in derived Disputable apps. However, it is not required\\n    // to be validated in the app itself as the connected Agreement is responsible for performing the check on a challenge.\\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\\\"CHALLENGE_ROLE\\\");\\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\\n\\n    // bytes32 public constant SET_AGREEMENT_ROLE = keccak256(\\\"SET_AGREEMENT_ROLE\\\");\\n    bytes32 public constant SET_AGREEMENT_ROLE = 0x8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f036;\\n\\n    // bytes32 internal constant AGREEMENT_POSITION = keccak256(\\\"aragonOS.appStorage.agreement\\\");\\n    bytes32 internal constant AGREEMENT_POSITION = 0x6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9;\\n\\n    modifier onlyAgreement() {\\n        require(address(_getAgreement()) == msg.sender, ERROR_SENDER_NOT_AGREEMENT);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Challenge disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be challenged\\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\\n    * @param _challenger Address that submitted the challenge\\n    */\\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external onlyAgreement {\\n        _onDisputableActionChallenged(_disputableActionId, _challengeId, _challenger);\\n    }\\n\\n    /**\\n    * @notice Allow disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be allowed\\n    */\\n    function onDisputableActionAllowed(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionAllowed(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Reject disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be rejected\\n    */\\n    function onDisputableActionRejected(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionRejected(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Void disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be voided\\n    */\\n    function onDisputableActionVoided(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionVoided(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Set Agreement to `_agreement`\\n    * @param _agreement Agreement instance to be set\\n    */\\n    function setAgreement(IAgreement _agreement) external auth(SET_AGREEMENT_ROLE) {\\n        IAgreement agreement = _getAgreement();\\n        require(agreement == IAgreement(0) && _agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\\n\\n        AGREEMENT_POSITION.setStorageAddress(address(_agreement));\\n        emit AgreementSet(_agreement);\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement\\n    * @return Agreement\\n    */\\n    function getAgreement() external view returns (IAgreement) {\\n        return _getAgreement();\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == DISPUTABLE_INTERFACE_ID;\\n    }\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionChallenged` hook\\n    * @param _disputableActionId Identifier of the action to be challenged\\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\\n    * @param _challenger Address that submitted the challenge\\n    */\\n    function _onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\\n    * @param _disputableActionId Identifier of the action to be rejected\\n    */\\n    function _onDisputableActionRejected(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\\n    * @param _disputableActionId Identifier of the action to be allowed\\n    */\\n    function _onDisputableActionAllowed(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\\n    * @param _disputableActionId Identifier of the action to be voided\\n    */\\n    function _onDisputableActionVoided(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Register a new disputable action in the Agreement\\n    * @param _disputableActionId Identifier of the action in the context of the Disputable\\n    * @param _context Link to human-readable context for the given action\\n    * @param _submitter Address that submitted the action\\n    * @return Unique identifier for the created action in the context of the Agreement\\n    */\\n    function _registerDisputableAction(uint256 _disputableActionId, bytes _context, address _submitter) internal returns (uint256) {\\n        IAgreement agreement = _ensureAgreement();\\n        return agreement.newAction(_disputableActionId, _context, _submitter);\\n    }\\n\\n    /**\\n    * @dev Close disputable action in the Agreement\\n    * @param _actionId Identifier of the action in the context of the Agreement\\n    */\\n    function _closeDisputableAction(uint256 _actionId) internal {\\n        IAgreement agreement = _ensureAgreement();\\n        agreement.closeAction(_actionId);\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement\\n    * @return Agreement\\n    */\\n    function _getAgreement() internal view returns (IAgreement) {\\n        return IAgreement(AGREEMENT_POSITION.getStorageAddress());\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement or revert if it has not been set\\n    * @return Agreement\\n    */\\n    function _ensureAgreement() internal view returns (IAgreement) {\\n        IAgreement agreement = _getAgreement();\\n        require(agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\\n        return agreement;\\n    }\\n}\\n\",\"keccak256\":\"0x263599fea1510ae4c2b911afd3fb44ef4b0c6e8f75860f1269145482c7400053\"},\"@aragon/os/contracts/apps/disputable/IAgreement.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract IAgreement {\\n\\n    event ActionSubmitted(uint256 indexed actionId, address indexed disputable);\\n    event ActionClosed(uint256 indexed actionId);\\n    event ActionChallenged(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionSettled(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionDisputed(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionAccepted(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionVoided(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionRejected(uint256 indexed actionId, uint256 indexed challengeId);\\n\\n    enum ChallengeState {\\n        Waiting,\\n        Settled,\\n        Disputed,\\n        Rejected,\\n        Accepted,\\n        Voided\\n    }\\n\\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256);\\n\\n    function closeAction(uint256 _actionId) external;\\n\\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedSubmittingEvidence, bytes _context) external;\\n\\n    function settleAction(uint256 _actionId) external;\\n\\n    function disputeAction(uint256 _actionId, bool _finishedSubmittingEvidence) external;\\n}\\n\",\"keccak256\":\"0xe8fa5edb52014934b90ceda4f7d8e191b5c164ebc5506189b56f0e183567f90f\"},\"@aragon/os/contracts/apps/disputable/IDisputable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAgreement.sol\\\";\\nimport \\\"../../lib/standards/ERC165.sol\\\";\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract IDisputable is ERC165 {\\n    // Includes setAgreement, onDisputableActionChallenged, onDisputableActionAllowed,\\n    // onDisputableActionRejected, onDisputableActionVoided, getAgreement, canChallenge, and canClose methods:\\n    bytes4 internal constant DISPUTABLE_INTERFACE_ID = bytes4(0xf3d3bb51);\\n\\n    event AgreementSet(IAgreement indexed agreement);\\n\\n    function setAgreement(IAgreement _agreement) external;\\n\\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external;\\n\\n    function onDisputableActionAllowed(uint256 _disputableActionId) external;\\n\\n    function onDisputableActionRejected(uint256 _disputableActionId) external;\\n\\n    function onDisputableActionVoided(uint256 _disputableActionId) external;\\n\\n    function getAgreement() external view returns (IAgreement);\\n\\n    function canChallenge(uint256 _disputableActionId) external view returns (bool);\\n\\n    function canClose(uint256 _disputableActionId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xce0da286f2b52dc33c9846b101ff075ac9461881aaf1753058151d51b1d55436\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/standards/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x6f67f6ece954fde87dd5e1696b4b759d18280d3e45ee54233744dee11ce1d4b5\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"@aragon/staking/interfaces/0.4/ILockManager.sol\":{\"content\":\"pragma solidity >=0.4 <0.5;\\n\\n\\ninterface ILockManager {\\n    /**\\n     * @notice Check if `_user`'s lock by `_lockManager` can be unlocked\\n     * @param _user Owner of lock\\n     * @param _amount Amount of locked tokens to unlock\\n     * @return Whether given user's lock can be unlocked\\n     */\\n    function canUnlock(address _user, uint256 _amount) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x60c38edbd06f85c1aef0a199487f4a05ccc69a36d733a890abb48024b39b9e43\"},\"@aragon/staking/interfaces/0.4/IStaking.sol\":{\"content\":\"pragma solidity >=0.4 <0.5;\\n\\n\\ninterface IStaking {\\n    // IERC-900\\n    function stake(uint256 _amount, bytes _data) external;\\n    function stakeFor(address _user, uint256 _amount, bytes _data) external;\\n    function unstake(uint256 _amount, bytes _data) external;\\n\\n    function totalStakedFor(address _addr) external view returns (uint256);\\n    function totalStaked() external view returns (uint256);\\n    function token() external view returns (address);\\n    function supportsHistory() external pure returns (bool);\\n\\n    function lastStakedFor(address addr) external view returns (uint256);\\n    function totalStakedForAt(address addr, uint256 blockNumber) external view returns (uint256);\\n    function totalStakedAt(uint256 blockNumber) external view returns (uint256);\\n\\n    // ILockable\\n    function allowManager(address _lockManager, uint256 _allowance, bytes _data) external;\\n    function unlockAndRemoveManager(address _user, address _lockManager) external;\\n    function increaseLockAllowance(address _lockManager, uint256 _allowance) external;\\n    function decreaseLockAllowance(address _user, address _lockManager, uint256 _allowance) external;\\n    function lock(address _user, uint256 _amount) external;\\n    function unlock(address _user, address _lockManager, uint256 _amount) external;\\n    function slash(address _user, address _to, uint256 _amount) external;\\n    function slashAndUnstake(address _user, address _to, uint256 _amount) external;\\n\\n    function getLock(address _user, address _lockManager) external view returns (uint256 _amount, uint256 _allowance);\\n    function unlockedBalanceOf(address _user) external view returns (uint256);\\n    function lockedBalanceOf(address _user) external view returns (uint256);\\n    function getBalancesOf(address _user) external view returns (uint256 staked, uint256 locked);\\n    function canUnlock(address _sender, address _user, address _lockManager, uint256 _amount) external view returns (bool);\\n\\n    // Misc.\\n    function transfer(address _to, uint256 _amount) external;\\n    function transferAndUnstake(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xc5452f8851176a7fe80b8182639abe40912d9f7634d00896c2049cca208a9937\"},\"@aragon/staking/interfaces/0.4/IStakingFactory.sol\":{\"content\":\"pragma solidity >=0.4 <0.5;\\n\\nimport \\\"./IStaking.sol\\\";\\n\\n\\ninterface IStakingFactory {\\n    function getOrCreateInstance(/* ERC20 */ address token) external returns (IStaking);\\n\\n    function existsInstance(/* ERC20 */ address token) external view returns (bool);\\n    function getInstance(/* ERC20 */ address token) external view returns (IStaking);\\n}\\n\",\"keccak256\":\"0xd796f7f8808d9a04bda0069d6611abf71609d87e256a8c4908eb8b805c7a4be3\"},\"contracts/Agreement.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/acl/IACLOracle.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/disputable/IAgreement.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/ConversionHelpers.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\nimport \\\"@aragon/staking/interfaces/0.4/IStaking.sol\\\";\\nimport \\\"@aragon/staking/interfaces/0.4/IStakingFactory.sol\\\";\\nimport \\\"@aragon/staking/interfaces/0.4/ILockManager.sol\\\";\\n\\nimport \\\"./arbitration/IArbitrable.sol\\\";\\nimport \\\"./arbitration/IAragonAppFeesCashier.sol\\\";\\n\\n\\ncontract Agreement is IArbitrable, ILockManager, IAgreement, IACLOracle, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n    using SafeERC20 for ERC20;\\n\\n    /* Arbitrator outcomes constants */\\n    uint256 internal constant DISPUTES_POSSIBLE_OUTCOMES = 2;\\n    // Note that Aragon Court treats the possible outcomes as arbitrary numbers, leaving the Arbitrable (us) to define how to understand them.\\n    // Some outcomes [0, 1, and 2] are reserved by Aragon Court: \\\"missing\\\", \\\"leaked\\\", and \\\"refused\\\", respectively.\\n    // This Arbitrable introduces the concept of the challenger/submitter (a binary outcome) as 3/4.\\n    // Note that Aragon Court emits the lowest outcome in the event of a tie, and so for us, we prefer the challenger.\\n    uint256 internal constant DISPUTES_RULING_CHALLENGER = 3;\\n    uint256 internal constant DISPUTES_RULING_SUBMITTER = 4;\\n\\n    /* Validation errors */\\n    string internal constant ERROR_SENDER_NOT_ALLOWED = \\\"AGR_SENDER_NOT_ALLOWED\\\";\\n    string internal constant ERROR_SIGNER_MUST_SIGN = \\\"AGR_SIGNER_MUST_SIGN\\\";\\n    string internal constant ERROR_SIGNER_ALREADY_SIGNED = \\\"AGR_SIGNER_ALREADY_SIGNED\\\";\\n    string internal constant ERROR_INVALID_SIGNING_SETTING = \\\"AGR_INVALID_SIGNING_SETTING\\\";\\n    string internal constant ERROR_INVALID_SETTLEMENT_OFFER = \\\"AGR_INVALID_SETTLEMENT_OFFER\\\";\\n    string internal constant ERROR_ACTION_DOES_NOT_EXIST = \\\"AGR_ACTION_DOES_NOT_EXIST\\\";\\n    string internal constant ERROR_CHALLENGE_DOES_NOT_EXIST = \\\"AGR_CHALLENGE_DOES_NOT_EXIST\\\";\\n    string internal constant ERROR_TOKEN_DEPOSIT_FAILED = \\\"AGR_TOKEN_DEPOSIT_FAILED\\\";\\n    string internal constant ERROR_TOKEN_TRANSFER_FAILED = \\\"AGR_TOKEN_TRANSFER_FAILED\\\";\\n    string internal constant ERROR_TOKEN_APPROVAL_FAILED = \\\"AGR_TOKEN_APPROVAL_FAILED\\\";\\n    string internal constant ERROR_TOKEN_NOT_CONTRACT = \\\"AGR_TOKEN_NOT_CONTRACT\\\";\\n    string internal constant ERROR_SETTING_DOES_NOT_EXIST = \\\"AGR_SETTING_DOES_NOT_EXIST\\\";\\n    string internal constant ERROR_ARBITRATOR_NOT_CONTRACT = \\\"AGR_ARBITRATOR_NOT_CONTRACT\\\";\\n    string internal constant ERROR_STAKING_FACTORY_NOT_CONTRACT = \\\"AGR_STAKING_FACTORY_NOT_CONTRACT\\\";\\n    string internal constant ERROR_ACL_ORACLE_SIGNER_MISSING = \\\"AGR_ACL_ORACLE_SIGNER_MISSING\\\";\\n    string internal constant ERROR_ACL_ORACLE_SIGNER_NOT_ADDRESS = \\\"AGR_ACL_ORACLE_SIGNER_NOT_ADDR\\\";\\n\\n    /* Disputable related errors */\\n    string internal constant ERROR_SENDER_CANNOT_CHALLENGE_ACTION = \\\"AGR_SENDER_CANT_CHALLENGE_ACTION\\\";\\n    string internal constant ERROR_DISPUTABLE_NOT_CONTRACT = \\\"AGR_DISPUTABLE_NOT_CONTRACT\\\";\\n    string internal constant ERROR_DISPUTABLE_NOT_ACTIVE = \\\"AGR_DISPUTABLE_NOT_ACTIVE\\\";\\n    string internal constant ERROR_DISPUTABLE_ALREADY_ACTIVE = \\\"AGR_DISPUTABLE_ALREADY_ACTIVE\\\";\\n    string internal constant ERROR_COLLATERAL_REQUIREMENT_DOES_NOT_EXIST = \\\"AGR_COL_REQ_DOES_NOT_EXIST\\\";\\n\\n    /* Action related errors */\\n    string internal constant ERROR_CANNOT_CHALLENGE_ACTION = \\\"AGR_CANNOT_CHALLENGE_ACTION\\\";\\n    string internal constant ERROR_CANNOT_CLOSE_ACTION = \\\"AGR_CANNOT_CLOSE_ACTION\\\";\\n    string internal constant ERROR_CANNOT_SETTLE_ACTION = \\\"AGR_CANNOT_SETTLE_ACTION\\\";\\n    string internal constant ERROR_CANNOT_DISPUTE_ACTION = \\\"AGR_CANNOT_DISPUTE_ACTION\\\";\\n    string internal constant ERROR_CANNOT_RULE_ACTION = \\\"AGR_CANNOT_RULE_ACTION\\\";\\n    string internal constant ERROR_CANNOT_SUBMIT_EVIDENCE = \\\"AGR_CANNOT_SUBMIT_EVIDENCE\\\";\\n    string internal constant ERROR_CANNOT_CLOSE_EVIDENCE_PERIOD = \\\"AGR_CANNOT_CLOSE_EVIDENCE_PERIOD\\\";\\n\\n    // This role will be checked against the Disputable app when users try to challenge actions.\\n    // It is expected to be configured per Disputable app. For reference, see `canPerformChallenge()`.\\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\\\"CHALLENGE_ROLE\\\");\\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\\n\\n    // bytes32 public constant CHANGE_AGREEMENT_ROLE = keccak256(\\\"CHANGE_AGREEMENT_ROLE\\\");\\n    bytes32 public constant CHANGE_AGREEMENT_ROLE = 0x07813bca4905795fa22783885acd0167950db28f2d7a40b70f666f429e19f1d9;\\n\\n    // bytes32 public constant MANAGE_DISPUTABLE_ROLE = keccak256(\\\"MANAGE_DISPUTABLE_ROLE\\\");\\n    bytes32 public constant MANAGE_DISPUTABLE_ROLE = 0x2309a8cbbd5c3f18649f3b7ac47a0e7b99756c2ac146dda1ffc80d3f80827be6;\\n\\n    event Signed(address indexed signer, uint256 settingId);\\n    event SettingChanged(uint256 settingId);\\n    event AppFeesCashierSynced(IAragonAppFeesCashier newAppFeesCashier);\\n    event DisputableAppActivated(address indexed disputable);\\n    event DisputableAppDeactivated(address indexed disputable);\\n    event CollateralRequirementChanged(address indexed disputable, uint256 collateralRequirementId);\\n\\n    struct Setting {\\n        IArbitrator arbitrator;\\n        IAragonAppFeesCashier aragonAppFeesCashier; // Fees cashier to deposit action fees (linked to the selected arbitrator)\\n        string title;\\n        bytes content;\\n    }\\n\\n    struct CollateralRequirement {\\n        ERC20 token;                        // ERC20 token to be used for collateral\\n        uint64 challengeDuration;           // Challenge duration, during which the submitter can raise a dispute\\n        uint256 actionAmount;               // Amount of collateral token to be locked from the submitter's staking pool when creating actions\\n        uint256 challengeAmount;            // Amount of collateral token to be locked from the challenger's own balance when challenging actions\\n        IStaking staking;                   // Staking pool cache for the collateral token -- will never change\\n    }\\n\\n    struct DisputableInfo {\\n        bool activated;                                                     // Whether the Disputable app is active\\n        uint256 nextCollateralRequirementsId;                               // Identification number of the next collateral requirement\\n        mapping (uint256 => CollateralRequirement) collateralRequirements;  // List of collateral requirements indexed by ID\\n    }\\n\\n    struct Action {\\n        DisputableAragonApp disputable;     // Disputable app that created the action\\n        uint256 disputableActionId;         // Identification number of the action on the Disputable app\\n        uint256 collateralRequirementId;    // Identification number of the collateral requirement applicable to the action\\n        uint256 settingId;                  // Identification number of the agreement setting applicable to the action\\n        address submitter;                  // Address that submitted the action\\n        bool closed;                        // Whether the action is closed (and cannot be challenged anymore)\\n        bytes context;                      // Link to a human-readable context for the given action\\n        uint256 lastChallengeId;            // Identification number of the action's most recent challenge, if any\\n    }\\n\\n    struct ArbitratorFees {\\n        ERC20 token;                        // ERC20 token used for the arbitration fees\\n        uint256 amount;                     // Amount of arbitration fees\\n    }\\n\\n    struct Challenge {\\n        uint256 actionId;                        // Identification number of the action associated to the challenge\\n        address challenger;                      // Address that challenged the action\\n        uint64 endDate;                          // Last date the submitter can raise a dispute against the challenge\\n        bytes context;                           // Link to a human-readable context for the challenge\\n        uint256 settlementOffer;                 // Amount of collateral tokens the challenger would accept without involving the arbitrator\\n        ArbitratorFees challengerArbitratorFees; // Arbitration fees paid by the challenger (in advance)\\n        ArbitratorFees submitterArbitratorFees;  // Arbitration fees paid by the submitter (on dispute creation)\\n        ChallengeState state;                    // Current state of the challenge\\n        bool submitterFinishedEvidence;          // Whether the action submitter has finished submitting evidence for the raised dispute\\n        bool challengerFinishedEvidence;         // Whether the action challenger has finished submitting evidence for the raised dispute\\n        uint256 disputeId;                       // Identification number of the dispute on the arbitrator\\n        uint256 ruling;                          // Ruling given from the arbitrator for the dispute\\n    }\\n\\n    IStakingFactory public stakingFactory;                           // Staking factory, for finding each collateral token's staking pool\\n\\n    uint256 private nextSettingId;\\n    mapping (uint256 => Setting) private settings;                  // List of historic agreement settings indexed by ID (starting at 1)\\n    mapping (address => uint256) private lastSettingSignedBy;       // Mapping of address => last agreement setting signed\\n    mapping (address => DisputableInfo) private disputableInfos;    // Mapping of Disputable app => disputable infos\\n\\n    uint256 private nextActionId;\\n    mapping (uint256 => Action) private actions;                    // List of actions indexed by ID (starting at 1)\\n\\n    uint256 private nextChallengeId;\\n    mapping (uint256 => Challenge) private challenges;              // List of challenges indexed by ID (starting at 1)\\n    mapping (uint256 => uint256) private challengeByDispute;        // Mapping of arbitrator's dispute ID => challenge ID\\n\\n    /**\\n    * @notice Initialize Agreement for \\\"`_title`\\\" and content \\\"`_content`\\\", with arbitrator `_arbitrator` and staking factory `_factory`\\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\\n    * @param _title String indicating a short description\\n    * @param _content Link to a human-readable text that describes the initial rules for the Agreement\\n    * @param _stakingFactory Staking factory for finding each collateral token's staking pool\\n    */\\n    function initialize(\\n        IArbitrator _arbitrator,\\n        bool _setAppFeesCashier,\\n        string _title,\\n        bytes _content,\\n        IStakingFactory _stakingFactory\\n    )\\n        external\\n    {\\n        initialized();\\n        require(isContract(address(_stakingFactory)), ERROR_STAKING_FACTORY_NOT_CONTRACT);\\n\\n        stakingFactory = _stakingFactory;\\n\\n        nextSettingId = 1;   // Agreement setting ID zero is considered the null agreement setting for further validations\\n        nextActionId = 1;    // Action ID zero is considered the null action for further validations\\n        nextChallengeId = 1; // Challenge ID zero is considered the null challenge for further validations\\n        _newSetting(_arbitrator, _setAppFeesCashier, _title, _content);\\n    }\\n\\n    /**\\n    * @notice Update Agreement to title \\\"`_title`\\\" and content \\\"`_content`\\\", with arbitrator `_arbitrator`\\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\\n    * @param _title String indicating a short description\\n    * @param _content Link to a human-readable text that describes the new rules for the Agreement\\n    */\\n    function changeSetting(\\n        IArbitrator _arbitrator,\\n        bool _setAppFeesCashier,\\n        string _title,\\n        bytes _content\\n    )\\n        external\\n        auth(CHANGE_AGREEMENT_ROLE)\\n    {\\n        _newSetting(_arbitrator, _setAppFeesCashier, _title, _content);\\n    }\\n\\n    /**\\n    * @notice Sync app fees cashier address\\n    * @dev The app fees cashier address is being cached in the contract to save gas.\\n    *      This can be called permission-lessly to allow any account to re-sync the cashier when changed by the arbitrator.\\n    *      Initialization check is implicitly provided by `_getSetting()`, as valid settings can only be created after initialization.\\n    */\\n    function syncAppFeesCashier() external {\\n        Setting storage setting = _getSetting(_getCurrentSettingId());\\n        IAragonAppFeesCashier newAppFeesCashier = _getArbitratorFeesCashier(setting.arbitrator);\\n        IAragonAppFeesCashier currentAppFeesCashier = setting.aragonAppFeesCashier;\\n\\n        // Sync the app fees cashier only if there was one set before and it's different from the arbitrator's current one\\n        if (currentAppFeesCashier != IAragonAppFeesCashier(0) && currentAppFeesCashier != newAppFeesCashier) {\\n            setting.aragonAppFeesCashier = newAppFeesCashier;\\n            emit AppFeesCashierSynced(newAppFeesCashier);\\n        }\\n    }\\n\\n    /**\\n    * @notice Activate Disputable app `_disputableAddress`\\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\\n    * @param _disputableAddress Address of the Disputable app\\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\\n    */\\n    function activate(\\n        address _disputableAddress,\\n        ERC20 _collateralToken,\\n        uint64 _challengeDuration,\\n        uint256 _actionAmount,\\n        uint256 _challengeAmount\\n    )\\n        external\\n        auth(MANAGE_DISPUTABLE_ROLE)\\n    {\\n        require(isContract(_disputableAddress), ERROR_DISPUTABLE_NOT_CONTRACT);\\n\\n        DisputableInfo storage disputableInfo = disputableInfos[_disputableAddress];\\n        _ensureInactiveDisputable(disputableInfo);\\n\\n        DisputableAragonApp disputable = DisputableAragonApp(_disputableAddress);\\n        disputableInfo.activated = true;\\n\\n        // If the disputable app is being activated for the first time, then we need to set-up its initial collateral\\n        // requirement and set its Agreement reference to here.\\n        if (disputable.getAgreement() != IAgreement(this)) {\\n            disputable.setAgreement(IAgreement(this));\\n            uint256 nextId = disputableInfo.nextCollateralRequirementsId;\\n            disputableInfo.nextCollateralRequirementsId = nextId > 0 ? nextId : 1;\\n        }\\n        _changeCollateralRequirement(disputable, disputableInfo, _collateralToken, _challengeDuration, _actionAmount, _challengeAmount);\\n\\n        emit DisputableAppActivated(disputable);\\n    }\\n\\n    /**\\n    * @notice Deactivate Disputable app `_disputable`\\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\\n    * @param _disputableAddress Address of the Disputable app to be deactivated\\n    */\\n    function deactivate(address _disputableAddress) external auth(MANAGE_DISPUTABLE_ROLE) {\\n        DisputableInfo storage disputableInfo = disputableInfos[_disputableAddress];\\n        _ensureActiveDisputable(disputableInfo);\\n\\n        disputableInfo.activated = false;\\n        emit DisputableAppDeactivated(_disputableAddress);\\n    }\\n\\n    /**\\n    * @notice Change `_disputable`'s collateral requirements\\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\\n    * @param _disputable Address of the Disputable app\\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\\n    */\\n    function changeCollateralRequirement(\\n        DisputableAragonApp _disputable,\\n        ERC20 _collateralToken,\\n        uint64 _challengeDuration,\\n        uint256 _actionAmount,\\n        uint256 _challengeAmount\\n    )\\n        external\\n        auth(MANAGE_DISPUTABLE_ROLE)\\n    {\\n        DisputableInfo storage disputableInfo = disputableInfos[address(_disputable)];\\n        _ensureActiveDisputable(disputableInfo);\\n\\n        _changeCollateralRequirement(_disputable, disputableInfo, _collateralToken, _challengeDuration, _actionAmount, _challengeAmount);\\n    }\\n\\n    /**\\n    * @notice Sign the agreement up-to setting #`_settingId`\\n    * @dev Callable by any account; only accounts that have signed the latest version of the agreement can submit new disputable actions.\\n    *      Initialization check is implicitly provided by `_settingId < nextSettingId`, as valid settings can only be created after initialization.\\n    * @param _settingId Last setting ID the user is agreeing with\\n    */\\n    function sign(uint256 _settingId) external {\\n        uint256 lastSettingIdSigned = lastSettingSignedBy[msg.sender];\\n        require(lastSettingIdSigned < _settingId, ERROR_SIGNER_ALREADY_SIGNED);\\n        require(_settingId < nextSettingId, ERROR_INVALID_SIGNING_SETTING);\\n\\n        lastSettingSignedBy[msg.sender] = _settingId;\\n        emit Signed(msg.sender, _settingId);\\n    }\\n\\n    /**\\n    * @notice Register action #`_disputableActionId` from disputable `msg.sender` for submitter `_submitter` with context `_context`\\n    * @dev This function should be called from the Disputable app each time a new disputable action is created.\\n    *      Each disputable action ID must only be registered once; this is how the Agreement gets notified about each disputable action.\\n    *      Initialization check is implicitly provided by `_ensureActiveDisputable()` as Disputable apps can only be activated\\n    *      via `activate()` which already requires initialization.\\n    *      IMPORTANT: Note the responsibility of the Disputable app in terms of providing the correct `_submitter` parameter.\\n    *      Users are required to trust that all Disputable apps activated with this Agreement have implemented this correctly, as\\n    *      otherwise funds could be maliciously locked from the incorrect account on new actions.\\n    * @param _disputableActionId Identification number of the action on the Disputable app\\n    * @param _context Link to a human-readable context for the given action\\n    * @param _submitter Address that submitted the action\\n    * @return Unique identification number for the created action on the Agreement\\n    */\\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256) {\\n        DisputableInfo storage disputableInfo = disputableInfos[msg.sender];\\n        _ensureActiveDisputable(disputableInfo);\\n\\n        uint256 currentSettingId = _getCurrentSettingId();\\n        uint256 lastSettingIdSigned = lastSettingSignedBy[_submitter];\\n        require(lastSettingIdSigned == currentSettingId, ERROR_SIGNER_MUST_SIGN);\\n\\n        // An initial collateral requirement is created when disputable apps are activated, thus length is always greater than 0\\n        uint256 currentCollateralRequirementId = disputableInfo.nextCollateralRequirementsId - 1;\\n        CollateralRequirement storage requirement = _getCollateralRequirement(disputableInfo, currentCollateralRequirementId);\\n        _lockBalance(requirement.staking, _submitter, requirement.actionAmount);\\n\\n        // Create new action\\n        uint256 id = nextActionId++;\\n        Action storage action = actions[id];\\n\\n        // Pay action submission fees\\n        Setting storage setting = _getSetting(currentSettingId);\\n        DisputableAragonApp disputable = DisputableAragonApp(msg.sender);\\n        _payAppFees(setting, disputable, _submitter, id);\\n\\n        action.disputable = disputable;\\n        action.disputableActionId = _disputableActionId;\\n        action.collateralRequirementId = currentCollateralRequirementId;\\n        action.settingId = currentSettingId;\\n        action.submitter = _submitter;\\n        action.context = _context;\\n\\n        emit ActionSubmitted(id, msg.sender);\\n        return id;\\n    }\\n\\n    /**\\n    * @notice Close action #`_actionId`\\n    * @dev This function closes actions that:\\n    *      - Are not currently challenged nor disputed, or\\n    *      - Were previously disputed but ruled in favour of the submitter or voided\\n    *      Disputable apps may call this method directly at the end of an action, but is also accessible in a permission-less manner\\n    *      in case the app does not close its own actions automatically (e.g. disputable votes that don't pass).\\n    *      Can be called multiple times; it does nothing if the action is already closed.\\n    *      Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\\n    * @param _actionId Identification number of the action to be closed\\n    */\\n    function closeAction(uint256 _actionId) external {\\n        Action storage action = _getAction(_actionId);\\n        if (action.closed) {\\n            return;\\n        }\\n\\n        require(_canClose(action), ERROR_CANNOT_CLOSE_ACTION);\\n        (, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\\n        _unlockBalance(requirement.staking, action.submitter, requirement.actionAmount);\\n        _unsafeCloseAction(_actionId, action);\\n    }\\n\\n    /**\\n    * @notice Challenge action #`_actionId`\\n    * @dev This is only callable by those who hold the CHALLENGE_ROLE on the related Disputable app.\\n    *      Can be called multiple times per action, until a challenge is successful (settled or ruled for challenger).\\n    *      Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\\n    * @param _actionId Identification number of the action to be challenged\\n    * @param _settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\\n    * @param _finishedEvidence Whether the challenger is finished submitting evidence with the challenge context\\n    * @param _context Link to a human-readable context for the challenge\\n    */\\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedEvidence, bytes _context) external {\\n        Action storage action = _getAction(_actionId);\\n        require(_canChallenge(action), ERROR_CANNOT_CHALLENGE_ACTION);\\n\\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\\n        require(_canPerformChallenge(disputable, msg.sender), ERROR_SENDER_CANNOT_CHALLENGE_ACTION);\\n        require(_settlementOffer <= requirement.actionAmount, ERROR_INVALID_SETTLEMENT_OFFER);\\n\\n        uint256 challengeId = _createChallenge(_actionId, action, msg.sender, requirement, _settlementOffer, _finishedEvidence, _context);\\n        action.lastChallengeId = challengeId;\\n        disputable.onDisputableActionChallenged(action.disputableActionId, challengeId, msg.sender);\\n        emit ActionChallenged(_actionId, challengeId);\\n    }\\n\\n    /**\\n    * @notice Settle challenged action #`_actionId`, accepting the settlement offer\\n    * @dev This can be accessed by both the submitter (at any time) or any account (after the settlement period has passed).\\n    *      Can only be called once (if at all) per opened challenge.\\n    *      Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\\n    * @param _actionId Identification number of the action to be settled\\n    */\\n    function settleAction(uint256 _actionId) external {\\n        (Action storage action, Challenge storage challenge, uint256 challengeId) = _getChallengedAction(_actionId);\\n        address submitter = action.submitter;\\n\\n        if (msg.sender == submitter) {\\n            require(_canSettle(challenge), ERROR_CANNOT_SETTLE_ACTION);\\n        } else {\\n            require(_canClaimSettlement(challenge), ERROR_CANNOT_SETTLE_ACTION);\\n        }\\n\\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\\n        uint256 actionCollateral = requirement.actionAmount;\\n        uint256 settlementOffer = challenge.settlementOffer;\\n\\n        // The settlement offer was already checked to be up-to the collateral amount upon challenge creation\\n        // However, we cap it to collateral amount to be safe\\n        // With this, we can avoid using SafeMath to calculate `unlockedAmount`\\n        uint256 slashedAmount = settlementOffer >= actionCollateral ? actionCollateral : settlementOffer;\\n        uint256 unlockedAmount = actionCollateral - slashedAmount;\\n\\n        // Unlock and slash action collateral for settlement offer\\n        address challenger = challenge.challenger;\\n        IStaking staking = requirement.staking;\\n        _unlockBalance(staking, submitter, unlockedAmount);\\n        _slashBalance(staking, submitter, challenger, slashedAmount);\\n\\n        // Transfer challenge collateral and challenger arbitrator fees back to the challenger\\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\\n        _transferTo(challenge.challengerArbitratorFees.token, challenger, challenge.challengerArbitratorFees.amount);\\n\\n        challenge.state = ChallengeState.Settled;\\n        disputable.onDisputableActionRejected(action.disputableActionId);\\n        emit ActionSettled(_actionId, challengeId);\\n        _unsafeCloseAction(_actionId, action);\\n    }\\n\\n    /**\\n    * @notice Dispute challenged action #`_actionId`, raising it to the arbitrator\\n    * @dev Only the action submitter can create a dispute for an action with an open challenge.\\n    *      Can only be called once (if at all) per opened challenge.\\n    *      Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\\n    * @param _actionId Identification number of the action to be disputed\\n    * @param _submitterFinishedEvidence Whether the submitter was finished submitting evidence with their action context\\n    */\\n    function disputeAction(uint256 _actionId, bool _submitterFinishedEvidence) external {\\n        (Action storage action, Challenge storage challenge, uint256 challengeId) = _getChallengedAction(_actionId);\\n        require(_canDispute(challenge), ERROR_CANNOT_DISPUTE_ACTION);\\n\\n        address submitter = action.submitter;\\n        require(msg.sender == submitter, ERROR_SENDER_NOT_ALLOWED);\\n\\n        IArbitrator arbitrator = _getArbitratorFor(action);\\n        bytes memory metadata = abi.encodePacked(appId(), action.lastChallengeId);\\n        uint256 disputeId = _createDispute(action, challenge, arbitrator, metadata);\\n        bool challengerFinishedEvidence = challenge.challengerFinishedEvidence;\\n        _submitEvidence(arbitrator, disputeId, submitter, action.context, _submitterFinishedEvidence);\\n        _submitEvidence(arbitrator, disputeId, challenge.challenger, challenge.context, challengerFinishedEvidence);\\n\\n        if (_submitterFinishedEvidence && challengerFinishedEvidence) {\\n            // Try-catch for: arbitrator.closeEvidencePeriod(disputeId);\\n            bytes memory closeEvidencePeriodCalldata = abi.encodeWithSelector(arbitrator.closeEvidencePeriod.selector, disputeId);\\n            address(arbitrator).call(closeEvidencePeriodCalldata);\\n        }\\n\\n        challenge.state = ChallengeState.Disputed;\\n        challenge.submitterFinishedEvidence = _submitterFinishedEvidence;\\n        challenge.disputeId = disputeId;\\n        challengeByDispute[disputeId] = challengeId;\\n        emit ActionDisputed(_actionId, challengeId);\\n    }\\n\\n    /**\\n    * @notice Submit evidence for dispute #`_disputeId`\\n    * @dev Only callable by the action submitter or challenger.\\n    *      Can be called as many times as desired until the dispute is over.\\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\\n    * @param _disputeId Identification number of the dispute on the arbitrator\\n    * @param _evidence Evidence data to be submitted\\n    * @param _finished Whether the evidence submitter is now finished submitting evidence\\n    */\\n    function submitEvidence(uint256 _disputeId, bytes _evidence, bool _finished) external {\\n        (, Action storage action, , Challenge storage challenge) = _getDisputedAction(_disputeId);\\n        require(_isDisputed(challenge), ERROR_CANNOT_SUBMIT_EVIDENCE);\\n\\n        IArbitrator arbitrator = _getArbitratorFor(action);\\n        if (msg.sender == action.submitter) {\\n            // If the submitter finished submitting evidence earlier, also emit this event as finished\\n            bool submitterFinishedEvidence = challenge.submitterFinishedEvidence || _finished;\\n            _submitEvidence(arbitrator, _disputeId, msg.sender, _evidence, submitterFinishedEvidence);\\n            challenge.submitterFinishedEvidence = submitterFinishedEvidence;\\n        } else if (msg.sender == challenge.challenger) {\\n            // If the challenger finished submitting evidence earlier, also emit this event as finished\\n            bool challengerFinishedEvidence = challenge.challengerFinishedEvidence || _finished;\\n            _submitEvidence(arbitrator, _disputeId, msg.sender, _evidence, challengerFinishedEvidence);\\n            challenge.challengerFinishedEvidence = challengerFinishedEvidence;\\n        } else {\\n            revert(ERROR_SENDER_NOT_ALLOWED);\\n        }\\n    }\\n\\n    /**\\n    * @notice Close evidence submission period for dispute #`_disputeId`\\n    * @dev Callable by any account.\\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\\n    * @param _disputeId Identification number of the dispute on the arbitrator\\n    */\\n    function closeEvidencePeriod(uint256 _disputeId) external {\\n        (, Action storage action, , Challenge storage challenge) = _getDisputedAction(_disputeId);\\n        require(_isDisputed(challenge), ERROR_CANNOT_SUBMIT_EVIDENCE);\\n        require(challenge.submitterFinishedEvidence && challenge.challengerFinishedEvidence, ERROR_CANNOT_CLOSE_EVIDENCE_PERIOD);\\n\\n        IArbitrator arbitrator = _getArbitratorFor(action);\\n        arbitrator.closeEvidencePeriod(_disputeId);\\n    }\\n\\n    /**\\n    * @notice Rule the action associated to dispute #`_disputeId` with ruling `_ruling`\\n    * @dev Can only be called once per challenge by the associated abitrator.\\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\\n    * @param _disputeId Identification number of the dispute on the arbitrator\\n    * @param _ruling Ruling given by the arbitrator\\n    */\\n    function rule(uint256 _disputeId, uint256 _ruling) external {\\n        (uint256 actionId, Action storage action, uint256 challengeId, Challenge storage challenge) = _getDisputedAction(_disputeId);\\n        require(_isDisputed(challenge), ERROR_CANNOT_RULE_ACTION);\\n\\n        IArbitrator arbitrator = _getArbitratorFor(action);\\n        require(arbitrator == IArbitrator(msg.sender), ERROR_SENDER_NOT_ALLOWED);\\n\\n        challenge.ruling = _ruling;\\n        emit Ruled(arbitrator, _disputeId, _ruling);\\n\\n        if (_ruling == DISPUTES_RULING_SUBMITTER) {\\n            _acceptAction(actionId, action, challengeId, challenge);\\n        } else if (_ruling == DISPUTES_RULING_CHALLENGER) {\\n            _rejectAction(actionId, action, challengeId, challenge);\\n        } else {\\n            _voidAction(actionId, action, challengeId, challenge);\\n        }\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n    * @dev Tell the identification number of the current agreement setting\\n    * @return Identification number of the current agreement setting\\n    */\\n    function getCurrentSettingId() external view returns (uint256) {\\n        return _getCurrentSettingId();\\n    }\\n\\n    /**\\n    * @dev Tell the information related to an agreement setting\\n    * @param _settingId Identification number of the agreement setting\\n    * @return arbitrator Address of the IArbitrator that will be used to resolve disputes\\n    * @return aragonAppFeesCashier Address of the fees cashier to deposit action fees (linked to the selected arbitrator)\\n    * @return title String indicating a short description\\n    * @return content Link to a human-readable text that describes the current rules for the Agreement\\n    */\\n    function getSetting(uint256 _settingId)\\n        external\\n        view\\n        returns (IArbitrator arbitrator, IAragonAppFeesCashier aragonAppFeesCashier, string title, bytes content)\\n    {\\n        Setting storage setting = _getSetting(_settingId);\\n        arbitrator = setting.arbitrator;\\n        aragonAppFeesCashier = setting.aragonAppFeesCashier;\\n        title = setting.title;\\n        content = setting.content;\\n    }\\n\\n    /**\\n    * @dev Tell the information related to a Disputable app\\n    * @param _disputable Address of the Disputable app\\n    * @return activated Whether the Disputable app is active\\n    * @return currentCollateralRequirementId Identification number of the current collateral requirement\\n    */\\n    function getDisputableInfo(address _disputable) external view returns (bool activated, uint256 currentCollateralRequirementId) {\\n        DisputableInfo storage disputableInfo = disputableInfos[_disputable];\\n        activated = disputableInfo.activated;\\n        uint256 nextId = disputableInfo.nextCollateralRequirementsId;\\n        // Since `nextCollateralRequirementsId` is initialized to 1 when disputable apps are activated, it is safe to consider the\\n        // current collateral requirement ID of a disputable app as 0 if it has not been set yet, which means it was not activated yet.\\n        currentCollateralRequirementId = nextId == 0 ? 0 : nextId - 1;\\n    }\\n\\n    /**\\n    * @dev Tell the information related to a collateral requirement of a Disputable app\\n    * @param _disputable Address of the Disputable app\\n    * @param _collateralRequirementId Identification number of the collateral requirement\\n    * @return collateralToken Address of the ERC20 token to be used for collateral\\n    * @return actionAmount Amount of collateral tokens that will be locked every time an action is created\\n    * @return challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\\n    * @return challengeDuration Challenge duration, during which the submitter can raise a dispute\\n    */\\n    function getCollateralRequirement(address _disputable, uint256 _collateralRequirementId)\\n        external\\n        view\\n        returns (\\n            ERC20 collateralToken,\\n            uint64 challengeDuration,\\n            uint256 actionAmount,\\n            uint256 challengeAmount\\n        )\\n    {\\n        DisputableInfo storage disputableInfo = disputableInfos[_disputable];\\n        CollateralRequirement storage collateral = _getCollateralRequirement(disputableInfo, _collateralRequirementId);\\n        collateralToken = collateral.token;\\n        actionAmount = collateral.actionAmount;\\n        challengeAmount = collateral.challengeAmount;\\n        challengeDuration = collateral.challengeDuration;\\n    }\\n\\n    /**\\n    * @dev Tell the information related to a signer\\n    * @param _signer Address of signer\\n    * @return lastSettingIdSigned Identification number of the last agreement setting signed by the signer\\n    * @return mustSign Whether the requested signer needs to sign the current agreement setting before submitting an action\\n    */\\n    function getSigner(address _signer) external view returns (uint256 lastSettingIdSigned, bool mustSign) {\\n        (lastSettingIdSigned, mustSign) = _getSigner(_signer);\\n    }\\n\\n    /**\\n    * @dev Tell the information related to an action\\n    * @param _actionId Identification number of the action\\n    * @return disputable Address of the Disputable app that created the action\\n    * @return disputableActionId Identification number of the action on the Disputable app\\n    * @return collateralRequirementId Identification number of the collateral requirement applicable to the action\\n    * @return settingId Identification number of the agreement setting applicable to the action\\n    * @return submitter Address that submitted the action\\n    * @return closed Whether the action is closed\\n    * @return context Link to a human-readable context for the action\\n    * @return lastChallengeId Identification number of the action's most recent challenge, if any\\n    * @return lastChallengeActive Whether the action's most recent challenge is still ongoing\\n    */\\n    function getAction(uint256 _actionId)\\n        external\\n        view\\n        returns (\\n            address disputable,\\n            uint256 disputableActionId,\\n            uint256 collateralRequirementId,\\n            uint256 settingId,\\n            address submitter,\\n            bool closed,\\n            bytes context,\\n            uint256 lastChallengeId,\\n            bool lastChallengeActive\\n        )\\n    {\\n        Action storage action = _getAction(_actionId);\\n\\n        disputable = action.disputable;\\n        disputableActionId = action.disputableActionId;\\n        collateralRequirementId = action.collateralRequirementId;\\n        settingId = action.settingId;\\n        submitter = action.submitter;\\n        closed = action.closed;\\n        context = action.context;\\n        lastChallengeId = action.lastChallengeId;\\n\\n        if (lastChallengeId > 0) {\\n            (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\\n            lastChallengeActive = _isWaitingChallengeAnswer(challenge) || _isDisputed(challenge);\\n        }\\n    }\\n\\n    /**\\n    * @dev Tell the information related to an action challenge\\n    * @param _challengeId Identification number of the challenge\\n    * @return actionId Identification number of the action associated to the challenge\\n    * @return challenger Address that challenged the action\\n    * @return endDate Datetime of the last date the submitter can raise a dispute against the challenge\\n    * @return context Link to a human-readable context for the challenge\\n    * @return settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\\n    * @return state Current state of the challenge\\n    * @return submitterFinishedEvidence Whether the action submitter has finished submitting evidence for the associated dispute\\n    * @return challengerFinishedEvidence Whether the action challenger has finished submitting evidence for the associated dispute\\n    * @return disputeId Identification number of the associated dispute on the arbitrator\\n    * @return ruling Ruling given from the arbitrator for the dispute\\n    */\\n    function getChallenge(uint256 _challengeId)\\n        external\\n        view\\n        returns (\\n            uint256 actionId,\\n            address challenger,\\n            uint64 endDate,\\n            bytes context,\\n            uint256 settlementOffer,\\n            ChallengeState state,\\n            bool submitterFinishedEvidence,\\n            bool challengerFinishedEvidence,\\n            uint256 disputeId,\\n            uint256 ruling\\n        )\\n    {\\n        Challenge storage challenge = _getChallenge(_challengeId);\\n\\n        actionId = challenge.actionId;\\n        challenger = challenge.challenger;\\n        endDate = challenge.endDate;\\n        context = challenge.context;\\n        settlementOffer = challenge.settlementOffer;\\n        state = challenge.state;\\n        submitterFinishedEvidence = challenge.submitterFinishedEvidence;\\n        challengerFinishedEvidence = challenge.challengerFinishedEvidence;\\n        disputeId = challenge.disputeId;\\n        ruling = challenge.ruling;\\n    }\\n\\n    /**\\n    * @dev Tell the arbitration fees paid for an action challenge\\n    *      Split from `getChallenge()` due to \\u201cstack too deep issues\\u201d\\n    * @param _challengeId Identification number of the challenge\\n    * @return submitterArbitratorFeesToken ERC20 token used for the arbitration fees paid by the submitter (on dispute creation)\\n    * @return submitterArbitratorFeesAmount Amount of arbitration fees paid by the submitter (on dispute creation)\\n    * @return challengerArbitratorFeesToken ERC20 token used for the arbitration fees paid by the challenger (in advance)\\n    * @return challengerArbitratorFeesAmount Amount of arbitration fees paid by the challenger (in advance)\\n    */\\n    function getChallengeArbitratorFees(uint256 _challengeId)\\n        external\\n        view\\n        returns (\\n            ERC20 submitterArbitratorFeesToken,\\n            uint256 submitterArbitratorFeesAmount,\\n            ERC20 challengerArbitratorFeesToken,\\n            uint256 challengerArbitratorFeesAmount\\n        )\\n    {\\n        Challenge storage challenge = _getChallenge(_challengeId);\\n\\n        submitterArbitratorFeesToken = challenge.submitterArbitratorFees.token;\\n        submitterArbitratorFeesAmount = challenge.submitterArbitratorFees.amount;\\n        challengerArbitratorFeesToken = challenge.challengerArbitratorFees.token;\\n        challengerArbitratorFeesAmount = challenge.challengerArbitratorFees.amount;\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can be challenged\\n    * @param _actionId Identification number of the action\\n    * @return True if the action can be challenged, false otherwise\\n    */\\n    function canChallenge(uint256 _actionId) external view returns (bool) {\\n        Action storage action = _getAction(_actionId);\\n        return _canChallenge(action);\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can be manually closed.\\n    *      An action can be closed if it is allowed to:\\n    *       - Proceed in the context of this Agreement (see `_canProceed()`), and\\n    *       - Be closed in the context of the originating Disputable app\\n    * @param _actionId Identification number of the action\\n    * @return True if the action can be closed, false otherwise\\n    */\\n    function canClose(uint256 _actionId) external view returns (bool) {\\n        Action storage action = _getAction(_actionId);\\n        return _canClose(action);\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can be settled\\n    * @param _actionId Identification number of the action\\n    * @return True if the action can be settled, false otherwise\\n    */\\n    function canSettle(uint256 _actionId) external view returns (bool) {\\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\\n        return _canSettle(challenge);\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can be settled by claiming its challenge settlement\\n    * @param _actionId Identification number of the action\\n    * @return True if the action settlement can be claimed, false otherwise\\n    */\\n    function canClaimSettlement(uint256 _actionId) external view returns (bool) {\\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\\n        return _canClaimSettlement(challenge);\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can be disputed\\n    * @param _actionId Identification number of the action\\n    * @return True if the action can be disputed, false otherwise\\n    */\\n    function canDispute(uint256 _actionId) external view returns (bool) {\\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\\n        return _canDispute(challenge);\\n    }\\n\\n    /**\\n    * @dev Tell whether an action's dispute can be ruled\\n    * @param _actionId Identification number of the action\\n    * @return True if the action's dispute can be ruled, false otherwise\\n    */\\n    function canRuleDispute(uint256 _actionId) external view returns (bool) {\\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\\n        return _isDisputed(challenge);\\n    }\\n\\n    /**\\n    * @dev Tell whether an address can challenge an action\\n    * @param _actionId Identification number of the action\\n    * @param _challenger Address of the challenger\\n    * @return True if the challenger can challenge the action, false otherwise\\n    */\\n    function canPerformChallenge(uint256 _actionId, address _challenger) external view returns (bool) {\\n        Action storage action = _getAction(_actionId);\\n        return _canPerformChallenge(action.disputable, _challenger);\\n    }\\n\\n    /**\\n    * @notice Tells whether an address has already signed the Agreement\\n    * @dev ACL oracle interface conformance\\n    * @return True if a parameterized address has signed the current version of the Agreement, false otherwise\\n    */\\n    function canPerform(address /* _grantee */, address /* _where */, bytes32 /* _what */, uint256[] _how)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        // We currently expect the address as the only permission parameter because an ACL Oracle's `grantee`\\n        // argument is not provided with the original sender if the permission is set for ANY_ENTITY.\\n        require(_how.length > 0, ERROR_ACL_ORACLE_SIGNER_MISSING);\\n        require(_how[0] < 2**160, ERROR_ACL_ORACLE_SIGNER_NOT_ADDRESS);\\n\\n        address signer = address(_how[0]);\\n        (, bool mustSign) = _getSigner(signer);\\n        return !mustSign;\\n    }\\n\\n    /**\\n    * @dev ILockManager conformance.\\n    *      The Staking contract checks this on each request to unlock an amount managed by this Agreement.\\n    *      It always returns false to disable owners from unlocking their funds arbitrarily, as we\\n    *      want to control the release of the locked amount when actions are closed or settled.\\n    * @return Whether the request to unlock tokens of a given owner should be allowed\\n    */\\n    function canUnlock(address, uint256) external view returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Disable built-in AragonApp token recovery escape hatch.\\n    *      This app is intended to hold users' funds and we do not want to allow them to be transferred to the default vault.\\n    * @return Always false\\n    */\\n    function allowRecoverability(address /* _token */) public view returns (bool) {\\n        return false;\\n    }\\n\\n    // Internal fns\\n\\n    /**\\n    * @dev Change agreement settings\\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\\n    * @param _title String indicating a short description\\n    * @param _content Link to a human-readable text that describes the new rules for the Agreement\\n    */\\n    function _newSetting(IArbitrator _arbitrator, bool _setAppFeesCashier, string _title, bytes _content) internal {\\n        require(isContract(address(_arbitrator)), ERROR_ARBITRATOR_NOT_CONTRACT);\\n\\n        uint256 id = nextSettingId++;\\n        Setting storage setting = settings[id];\\n        setting.title = _title;\\n        setting.content = _content;\\n        setting.arbitrator = _arbitrator;\\n\\n        // Note that if the Agreement app didn't have an app fees cashier set at the start, then it must be explicitly set later.\\n        // Arbitrators must always have at least some sort of subscription module, and having the flexibility to turn this off\\n        // on the Agreement side can be useful.\\n        setting.aragonAppFeesCashier = _setAppFeesCashier ? _getArbitratorFeesCashier(_arbitrator) : IAragonAppFeesCashier(0);\\n        emit SettingChanged(id);\\n    }\\n\\n    /**\\n    * @dev Change the collateral requirements of an active Disputable app\\n    * @param _disputable Address of the Disputable app\\n    * @param _disputableInfo Disputable info instance for the Disputable app\\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\\n    */\\n    function _changeCollateralRequirement(\\n        DisputableAragonApp _disputable,\\n        DisputableInfo storage _disputableInfo,\\n        ERC20 _collateralToken,\\n        uint64 _challengeDuration,\\n        uint256 _actionAmount,\\n        uint256 _challengeAmount\\n    )\\n        internal\\n    {\\n        require(isContract(address(_collateralToken)), ERROR_TOKEN_NOT_CONTRACT);\\n\\n        IStaking staking = stakingFactory.getOrCreateInstance(_collateralToken);\\n        uint256 id = _disputableInfo.nextCollateralRequirementsId++;\\n        CollateralRequirement storage collateralRequirement = _disputableInfo.collateralRequirements[id];\\n        collateralRequirement.token = _collateralToken;\\n        collateralRequirement.challengeDuration = _challengeDuration;\\n        collateralRequirement.actionAmount = _actionAmount;\\n        collateralRequirement.challengeAmount = _challengeAmount;\\n        collateralRequirement.staking = staking;\\n\\n        emit CollateralRequirementChanged(_disputable, id);\\n    }\\n\\n    /**\\n    * @dev Pay transactions fees required for new actions\\n    * @param _setting Agreement setting instance, used to get Aragon App Fees Cashier\\n    * @param _disputable Address of the Disputable app, used to determine fees\\n    * @param _submitter Address that submitted the action\\n    * @param _actionId Identification number of the action being paid for\\n    */\\n    function _payAppFees(Setting storage _setting, DisputableAragonApp _disputable, address _submitter, uint256 _actionId) internal {\\n        // Get fees\\n        IAragonAppFeesCashier aragonAppFeesCashier = _setting.aragonAppFeesCashier;\\n        if (aragonAppFeesCashier == IAragonAppFeesCashier(0)) {\\n            return;\\n        }\\n\\n        bytes32 appId = _disputable.appId();\\n        (ERC20 token, uint256 amount) = aragonAppFeesCashier.getAppFee(appId);\\n\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // Pull the required amount from the fee token's staking pool and approve them to the cashier\\n        IStaking staking = stakingFactory.getOrCreateInstance(token);\\n        _lockBalance(staking, _submitter, amount);\\n        _slashBalance(staking, _submitter, address(this), amount);\\n        _approveFor(token, address(aragonAppFeesCashier), amount);\\n\\n        // Pay fees\\n        aragonAppFeesCashier.payAppFees(appId, abi.encodePacked(_actionId));\\n    }\\n\\n    /**\\n    * @dev Close an action\\n    *      This function does not perform any checks about the action status; callers must have already ensured the action can be closed.\\n    * @param _actionId Identification number of the action being closed\\n    * @param _action Action instance being closed\\n    */\\n    function _unsafeCloseAction(uint256 _actionId, Action storage _action) internal {\\n        _action.closed = true;\\n        emit ActionClosed(_actionId);\\n    }\\n\\n    /**\\n    * @dev Challenge an action\\n    * @param _actionId Identification number of the action being challenged\\n    * @param _action Action instance being challenged\\n    * @param _challenger Address challenging the action\\n    * @param _requirement Collateral requirement instance applicable to the challenge\\n    * @param _settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\\n    * @param _finishedSubmittingEvidence Whether the challenger is finished submitting evidence with the challenge context\\n    * @param _context Link to a human-readable context for the challenge\\n    * @return Identification number for the created challenge\\n    */\\n    function _createChallenge(\\n        uint256 _actionId,\\n        Action storage _action,\\n        address _challenger,\\n        CollateralRequirement storage _requirement,\\n        uint256 _settlementOffer,\\n        bool _finishedSubmittingEvidence,\\n        bytes _context\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        // Store challenge\\n        uint256 challengeId = nextChallengeId++;\\n        Challenge storage challenge = challenges[challengeId];\\n        challenge.actionId = _actionId;\\n        challenge.challenger = _challenger;\\n        challenge.endDate = getTimestamp64().add(_requirement.challengeDuration);\\n        challenge.context = _context;\\n        challenge.settlementOffer = _settlementOffer;\\n        challenge.challengerFinishedEvidence = _finishedSubmittingEvidence;\\n\\n        // Pull challenge collateral\\n        _depositFrom(_requirement.token, _challenger, _requirement.challengeAmount);\\n\\n        // Pull pre-paid arbitrator fees from challenger\\n        IArbitrator arbitrator = _getArbitratorFor(_action);\\n        (, ERC20 feeToken, uint256 feeAmount) = arbitrator.getDisputeFees();\\n        challenge.challengerArbitratorFees.token = feeToken;\\n        challenge.challengerArbitratorFees.amount = feeAmount;\\n        _depositFrom(feeToken, _challenger, feeAmount);\\n\\n        return challengeId;\\n    }\\n\\n    /**\\n    * @dev Dispute an action\\n    * @param _action Action instance being disputed\\n    * @param _challenge Currently open challenge instance for the action\\n    * @return _arbitrator Address of the IArbitrator applicable to the action\\n    * @return _metadata Metadata content to be used for the dispute\\n    * @return Identification number of the dispute created on the arbitrator\\n    */\\n    function _createDispute(Action storage _action, Challenge storage _challenge, IArbitrator _arbitrator, bytes memory _metadata)\\n        internal\\n        returns (uint256)\\n    {\\n        // Pull arbitration fees from submitter\\n        (address disputeFeeRecipient, ERC20 feeToken, uint256 feeAmount) = _arbitrator.getDisputeFees();\\n        _challenge.submitterArbitratorFees.token = feeToken;\\n        _challenge.submitterArbitratorFees.amount = feeAmount;\\n\\n        address submitter = _action.submitter;\\n        _depositFrom(feeToken, submitter, feeAmount);\\n\\n        // Create dispute. The arbitrator should pull its arbitration fees (if any) from this Agreement on `createDispute()`.\\n        _approveFor(feeToken, disputeFeeRecipient, feeAmount);\\n        uint256 disputeId = _arbitrator.createDispute(DISPUTES_POSSIBLE_OUTCOMES, _metadata);\\n\\n        return disputeId;\\n    }\\n\\n    /**\\n    * @dev Submit evidence for a dispute on an arbitrator\\n    * @param _arbitrator Arbitrator to submit evidence on\\n    * @param _disputeId Identification number of the dispute on the arbitrator\\n    * @param _submitter Address submitting the evidence\\n    * @param _evidence Evidence data to be submitted\\n    * @param _finished Whether the submitter is now finished submitting evidence\\n    */\\n    function _submitEvidence(IArbitrator _arbitrator, uint256 _disputeId, address _submitter, bytes _evidence, bool _finished) internal {\\n        if (_evidence.length > 0) {\\n            emit EvidenceSubmitted(_arbitrator, _disputeId, _submitter, _evidence, _finished);\\n        }\\n    }\\n\\n    /**\\n    * @dev Reject an action (\\\"accept challenge\\\")\\n    * @param _actionId Identification number of the action to be rejected\\n    * @param _action Action instance to be rejected\\n    * @param _challengeId Current challenge identification number for the action\\n    * @param _challenge Current challenge instance for the action\\n    */\\n    function _rejectAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\\n        _challenge.state = ChallengeState.Accepted;\\n\\n        address challenger = _challenge.challenger;\\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\\n\\n        // Transfer action collateral, challenge collateral, and challenger arbitrator fees to the challenger\\n        _slashBalance(requirement.staking, _action.submitter, challenger, requirement.actionAmount);\\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\\n        _transferTo(_challenge.challengerArbitratorFees.token, challenger, _challenge.challengerArbitratorFees.amount);\\n        disputable.onDisputableActionRejected(_action.disputableActionId);\\n        emit ActionRejected(_actionId, _challengeId);\\n        _unsafeCloseAction(_actionId, _action);\\n    }\\n\\n    /**\\n    * @dev Accept an action (\\\"reject challenge\\\")\\n    * @param _actionId Identification number of the action to be accepted\\n    * @param _action Action instance to be accepted\\n    * @param _challengeId Current challenge identification number for the action\\n    * @param _challenge Current challenge instance for the action\\n    */\\n    function _acceptAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\\n        _challenge.state = ChallengeState.Rejected;\\n\\n        address submitter = _action.submitter;\\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\\n\\n        // Transfer challenge collateral and challenger arbitrator fees to the submitter\\n        _transferTo(requirement.token, submitter, requirement.challengeAmount);\\n        _transferTo(_challenge.challengerArbitratorFees.token, submitter, _challenge.challengerArbitratorFees.amount);\\n        disputable.onDisputableActionAllowed(_action.disputableActionId);\\n        emit ActionAccepted(_actionId, _challengeId);\\n\\n        // Note that the action still continues after this ruling and will be closed at a future date\\n    }\\n\\n    /**\\n    * @dev Void an action (\\\"void challenge\\\")\\n    * @param _actionId Identification number of the action to be voided\\n    * @param _action Action instance to be voided\\n    * @param _challengeId Current challenge identification number for the action\\n    * @param _challenge Current challenge instance for the action\\n    */\\n    function _voidAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\\n        _challenge.state = ChallengeState.Voided;\\n\\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\\n        address challenger = _challenge.challenger;\\n\\n        // Return challenge collateral to the challenger, and split the challenger arbitrator fees between the challenger and the submitter\\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\\n        ERC20 challengerArbitratorFeesToken = _challenge.challengerArbitratorFees.token;\\n        uint256 challengerArbitratorFeesAmount = _challenge.challengerArbitratorFees.amount;\\n        uint256 submitterPayBack = challengerArbitratorFeesAmount / 2;\\n        // No need for Safemath because of previous computation\\n        uint256 challengerPayBack = challengerArbitratorFeesAmount - submitterPayBack;\\n        _transferTo(challengerArbitratorFeesToken, _action.submitter, submitterPayBack);\\n        _transferTo(challengerArbitratorFeesToken, challenger, challengerPayBack);\\n        disputable.onDisputableActionVoided(_action.disputableActionId);\\n        emit ActionVoided(_actionId, _challengeId);\\n\\n        // Note that the action still continues after this ruling and will be closed at a future date\\n    }\\n\\n    /**\\n    * @dev Lock some tokens in the staking pool for a user\\n    * @param _staking Staking pool for the ERC20 token to be locked\\n    * @param _user Address of the user to lock tokens for\\n    * @param _amount Amount of collateral tokens to be locked\\n    */\\n    function _lockBalance(IStaking _staking, address _user, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        _staking.lock(_user, _amount);\\n    }\\n\\n    /**\\n    * @dev Unlock some tokens in the staking pool for a user\\n    * @param _staking Staking pool for the ERC20 token to be unlocked\\n    * @param _user Address of the user to unlock tokens for\\n    * @param _amount Amount of collateral tokens to be unlocked\\n    */\\n    function _unlockBalance(IStaking _staking, address _user, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        _staking.unlock(_user, address(this), _amount);\\n    }\\n\\n    /**\\n    * @dev Slash some tokens in the staking pool from a user to a recipient\\n    * @param _staking Staking pool for the ERC20 token to be slashed\\n    * @param _user Address of the user to be slashed\\n    * @param _recipient Address receiving the slashed tokens\\n    * @param _amount Amount of collateral tokens to be slashed\\n    */\\n    function _slashBalance(IStaking _staking, address _user, address _recipient, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        _staking.slashAndUnstake(_user, _recipient, _amount);\\n    }\\n\\n    /**\\n    * @dev Transfer tokens to an address\\n    * @param _token ERC20 token to be transferred\\n    * @param _to Address receiving the tokens\\n    * @param _amount Amount of tokens to be transferred\\n    */\\n    function _transferTo(ERC20 _token, address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            require(_token.safeTransfer(_to, _amount), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n    }\\n\\n    /**\\n    * @dev Deposit tokens from an address to this Agreement\\n    * @param _token ERC20 token to be transferred\\n    * @param _from Address transferring the tokens\\n    * @param _amount Amount of tokens to be transferred\\n    */\\n    function _depositFrom(ERC20 _token, address _from, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            require(_token.safeTransferFrom(_from, address(this), _amount), ERROR_TOKEN_DEPOSIT_FAILED);\\n        }\\n    }\\n\\n    /**\\n    * @dev Approve tokens held by this Agreement to another address\\n    * @param _token ERC20 token used for the arbitration fees\\n    * @param _to Address to be approved\\n    * @param _amount Amount of `_arbitrationFeeToken` tokens to be approved\\n    */\\n    function _approveFor(ERC20 _token, address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            // To be safe, we first set the allowance to zero in case there is a remaining approval for the arbitrator.\\n            // This is not strictly necessary for ERC20s, but some tokens, e.g. MiniMe (ANT and ANJ),\\n            // revert on an approval if an outstanding allowance exists\\n            require(_token.safeApprove(_to, 0), ERROR_TOKEN_APPROVAL_FAILED);\\n            require(_token.safeApprove(_to, _amount), ERROR_TOKEN_APPROVAL_FAILED);\\n        }\\n    }\\n\\n    /**\\n    * @dev Fetch an agreement setting instance by identification number\\n    * @param _settingId Identification number of the agreement setting\\n    * @return Agreement setting instance associated to the given identification number\\n    */\\n    function _getSetting(uint256 _settingId) internal view returns (Setting storage) {\\n        require(_settingId > 0 && _settingId < nextSettingId, ERROR_SETTING_DOES_NOT_EXIST);\\n        return settings[_settingId];\\n    }\\n\\n    /**\\n    * @dev Tell the identification number of the current agreement setting\\n    * @return Identification number of the current agreement setting\\n    */\\n    function _getCurrentSettingId() internal view returns (uint256) {\\n        // An initial setting is created during initialization, thus after initialization, length will be always greater than 0\\n        return nextSettingId == 0 ? 0 : nextSettingId - 1;\\n    }\\n\\n    /**\\n    * @dev Tell the arbitrator to be used for an action\\n    * @param _action Action instance\\n    * @return arbitrator Address of the IArbitrator that will be used to resolve disputes\\n    */\\n    function _getArbitratorFor(Action storage _action) internal view returns (IArbitrator) {\\n        Setting storage setting = _getSetting(_action.settingId);\\n        return setting.arbitrator;\\n    }\\n\\n    /**\\n    * @dev Tell the app fees cashier instance associated to an arbitrator\\n    * @param _arbitrator Arbitrator querying the app fees cashier for\\n    * @return Address of the app fees cashier associated to the arbitrator\\n    */\\n    function _getArbitratorFeesCashier(IArbitrator _arbitrator) internal view returns (IAragonAppFeesCashier) {\\n        (address cashier,,) = _arbitrator.getSubscriptionFees(address(this));\\n        return IAragonAppFeesCashier(cashier);\\n    }\\n\\n    /**\\n    * @dev Ensure a Disputable app is activate\\n    * @param _disputableInfo Disputable info of the app\\n    */\\n    function _ensureActiveDisputable(DisputableInfo storage _disputableInfo) internal view {\\n        require(_disputableInfo.activated, ERROR_DISPUTABLE_NOT_ACTIVE);\\n    }\\n\\n    /**\\n    * @dev Ensure a Disputable app is inactive\\n    * @param _disputableInfo Disputable info of the app\\n    */\\n    function _ensureInactiveDisputable(DisputableInfo storage _disputableInfo) internal view {\\n        require(!_disputableInfo.activated, ERROR_DISPUTABLE_ALREADY_ACTIVE);\\n    }\\n\\n    /**\\n    * @dev Tell the disputable-related information about an action\\n    * @param _action Action instance\\n    * @return disputable Address of the Disputable app associated to the action\\n    * @return requirement Collateral requirement instance applicable to the action\\n    */\\n    function _getDisputableInfoFor(Action storage _action)\\n        internal\\n        view\\n        returns (DisputableAragonApp disputable, CollateralRequirement storage requirement)\\n    {\\n        disputable = _action.disputable;\\n        DisputableInfo storage disputableInfo = disputableInfos[address(disputable)];\\n        requirement = _getCollateralRequirement(disputableInfo, _action.collateralRequirementId);\\n    }\\n\\n    /**\\n    * @dev Fetch the collateral requirement instance by identification number for a Disputable app\\n    * @param _disputableInfo Disputable info instance\\n    * @param _collateralRequirementId Identification number of the collateral requirement\\n    * @return Collateral requirement instance associated to the given identification number\\n    */\\n    function _getCollateralRequirement(DisputableInfo storage _disputableInfo, uint256 _collateralRequirementId)\\n        internal\\n        view\\n        returns (CollateralRequirement storage)\\n    {\\n        bool exists = _collateralRequirementId > 0 && _collateralRequirementId < _disputableInfo.nextCollateralRequirementsId;\\n        require(exists, ERROR_COLLATERAL_REQUIREMENT_DOES_NOT_EXIST);\\n        return _disputableInfo.collateralRequirements[_collateralRequirementId];\\n    }\\n\\n    /**\\n    * @dev Tell the information related to a signer\\n    * @param _signer Address of signer\\n    * @return lastSettingIdSigned Identification number of the last agreement setting signed by the signer\\n    * @return mustSign Whether the signer needs to sign the current agreement setting before submitting an action\\n    */\\n    function _getSigner(address _signer) internal view returns (uint256 lastSettingIdSigned, bool mustSign) {\\n        lastSettingIdSigned = lastSettingSignedBy[_signer];\\n        mustSign = lastSettingIdSigned < _getCurrentSettingId();\\n    }\\n\\n    /**\\n    * @dev Fetch an action instance by identification number\\n    * @param _actionId Identification number of the action\\n    * @return Action instance associated to the given identification number\\n    */\\n    function _getAction(uint256 _actionId) internal view returns (Action storage) {\\n        require(_actionId > 0 && _actionId < nextActionId, ERROR_ACTION_DOES_NOT_EXIST);\\n        return actions[_actionId];\\n    }\\n\\n    /**\\n    * @dev Fetch a challenge instance by identification number\\n    * @param _challengeId Identification number of the challenge\\n    * @return Challenge instance associated to the given identification number\\n    */\\n    function _getChallenge(uint256 _challengeId) internal view returns (Challenge storage) {\\n        require(_existChallenge(_challengeId), ERROR_CHALLENGE_DOES_NOT_EXIST);\\n        return challenges[_challengeId];\\n    }\\n\\n    /**\\n    * @dev Fetch an action instance along with its most recent challenge by identification number\\n    * @param _actionId Identification number of the action\\n    * @return action Action instance associated to the given identification number\\n    * @return challenge Most recent challenge instance associated to the action\\n    * @return challengeId Identification number of the most recent challenge associated to the action\\n    */\\n    function _getChallengedAction(uint256 _actionId)\\n        internal\\n        view\\n        returns (Action storage action, Challenge storage challenge, uint256 challengeId)\\n    {\\n        action = _getAction(_actionId);\\n        challengeId = action.lastChallengeId;\\n        challenge = _getChallenge(challengeId);\\n    }\\n\\n    /**\\n    * @dev Fetch a dispute's associated action and challenge instance\\n    * @param _disputeId Identification number of the dispute on the arbitrator\\n    * @return actionId Identification number of the action associated to the dispute\\n    * @return action Action instance associated to the dispute\\n    * @return challengeId Identification number of the challenge associated to the dispute\\n    * @return challenge Current challenge instance associated to the dispute\\n    */\\n    function _getDisputedAction(uint256 _disputeId)\\n        internal\\n        view\\n        returns (uint256 actionId, Action storage action, uint256 challengeId, Challenge storage challenge)\\n    {\\n        challengeId = challengeByDispute[_disputeId];\\n        challenge = _getChallenge(challengeId);\\n        actionId = challenge.actionId;\\n        action = _getAction(actionId);\\n    }\\n\\n    /**\\n    * @dev Tell whether a challenge exists\\n    * @param _challengeId Identification number of the challenge\\n    * @return True if the requested challenge exists, false otherwise\\n    */\\n    function _existChallenge(uint256 _challengeId) internal view returns (bool) {\\n        return _challengeId > 0 && _challengeId < nextChallengeId;\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can be manually closed\\n    * @param _action Action instance\\n    * @return True if the action can be closed, false otherwise\\n    */\\n    function _canClose(Action storage _action) internal view returns (bool) {\\n        if (!_canProceed(_action)) {\\n            return false;\\n        }\\n\\n        DisputableAragonApp disputable = _action.disputable;\\n        // Assume that the Disputable app does not need to be checked if it's the one asking us to close an action\\n        return DisputableAragonApp(msg.sender) == disputable || disputable.canClose(_action.disputableActionId);\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can be challenged\\n    * @param _action Action instance\\n    * @return True if the action can be challenged, false otherwise\\n    */\\n    function _canChallenge(Action storage _action) internal view returns (bool) {\\n        return _canProceed(_action) && _action.disputable.canChallenge(_action.disputableActionId);\\n    }\\n\\n    /**\\n    * @dev Tell whether an action can proceed to another state.\\n    * @dev An action can proceed if it is:\\n    *       - Not closed\\n    *       - Not currently challenged or disputed, and\\n    *       - Not already settled or had a dispute rule in favour of the challenger (the action will have been closed automatically)\\n    * @param _action Action instance\\n    * @return True if the action can proceed, false otherwise\\n    */\\n    function _canProceed(Action storage _action) internal view returns (bool) {\\n        // If the action was already closed, return false\\n        if (_action.closed) {\\n            return false;\\n        }\\n\\n        uint256 challengeId = _action.lastChallengeId;\\n\\n        // If the action has not been challenged yet, return true\\n        if (!_existChallenge(challengeId)) {\\n            return true;\\n        }\\n\\n        // If the action was previously challenged but ruled in favour of the submitter or voided, return true\\n        Challenge storage challenge = challenges[challengeId];\\n        ChallengeState state = challenge.state;\\n        return state == ChallengeState.Rejected || state == ChallengeState.Voided;\\n    }\\n\\n    /**\\n    * @dev Tell whether a challenge can be settled\\n    * @param _challenge Challenge instance\\n    * @return True if the challenge can be settled, false otherwise\\n    */\\n    function _canSettle(Challenge storage _challenge) internal view returns (bool) {\\n        return _isWaitingChallengeAnswer(_challenge);\\n    }\\n\\n    /**\\n    * @dev Tell whether a challenge settlement can be claimed\\n    * @param _challenge Challenge instance\\n    * @return True if the challenge settlement can be claimed, false otherwise\\n    */\\n    function _canClaimSettlement(Challenge storage _challenge) internal view returns (bool) {\\n        return _isWaitingChallengeAnswer(_challenge) && getTimestamp() >= uint256(_challenge.endDate);\\n    }\\n\\n    /**\\n    * @dev Tell whether a challenge can be disputed\\n    * @param _challenge Challenge instance\\n    * @return True if the challenge can be disputed, false otherwise\\n    */\\n    function _canDispute(Challenge storage _challenge) internal view returns (bool) {\\n        return _isWaitingChallengeAnswer(_challenge) && uint256(_challenge.endDate) > getTimestamp();\\n    }\\n\\n    /**\\n    * @dev Tell whether a challenge is waiting to be answered\\n    * @param _challenge Challenge instance\\n    * @return True if the challenge is waiting to be answered, false otherwise\\n    */\\n    function _isWaitingChallengeAnswer(Challenge storage _challenge) internal view returns (bool) {\\n        return _challenge.state == ChallengeState.Waiting;\\n    }\\n\\n    /**\\n    * @dev Tell whether a challenge is disputed\\n    * @param _challenge Challenge instance\\n    * @return True if the challenge is disputed, false otherwise\\n    */\\n    function _isDisputed(Challenge storage _challenge) internal view returns (bool) {\\n        return _challenge.state == ChallengeState.Disputed;\\n    }\\n\\n    /**\\n    * @dev Tell whether an address has permission to challenge actions on a specific Disputable app\\n    * @param _disputable Address of the Disputable app\\n    * @param _challenger Address of the challenger\\n    * @return True if the challenger can challenge actions on the Disputable app, false otherwise\\n    */\\n    function _canPerformChallenge(DisputableAragonApp _disputable, address _challenger) internal view returns (bool) {\\n        IKernel currentKernel = kernel();\\n        if (currentKernel == IKernel(0)) {\\n            return false;\\n        }\\n\\n        // To make sure the challenger address is reachable by ACL oracles, we need to pass it as the first argument.\\n        // Permissions set with ANY_ENTITY do not provide the original sender's address into the ACL Oracle's `grantee` argument.\\n        bytes memory params = ConversionHelpers.dangerouslyCastUintArrayToBytes(arr(_challenger));\\n        return currentKernel.hasPermission(_challenger, address(_disputable), CHALLENGE_ROLE, params);\\n    }\\n}\\n\",\"keccak256\":\"0x765642b1aa32f843c8bb0f2d5676906c0a1f5fe8041a798ce778931b6d689577\"},\"contracts/arbitration/IAragonAppFeesCashier.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n\\n/**\\n* @title AragonAppFeesCashier interface\\n* @dev This interface is derived from the `IArbitrator`'s subscriptions module.\\n*      It is used to pay the fees corresponding to the usage of a disputable app.\\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/subscriptions/IAragonAppFeesCashier.sol\\n*      since we are using different solidity versions.\\n*/\\ninterface IAragonAppFeesCashier {\\n    /**\\n    * @dev Emitted when an IAragonAppFeesCashier instance sets a new fee for an app\\n    * @param appId App identifier\\n    * @param token Token address to be used for the fees\\n    * @param amount Fee amount to be charged for the given app\\n    */\\n    event AppFeeSet(bytes32 indexed appId, ERC20 token, uint256 amount);\\n\\n    /**\\n    * @dev Emitted when an IAragonAppFeesCashier instance unsets an app fee\\n    * @param appId App identifier\\n    */\\n    event AppFeeUnset(bytes32 indexed appId);\\n\\n    /**\\n    * @dev Emitted when an IAragonAppFeesCashier instance receives a payment for an app\\n    * @param by Address paying the fees\\n    * @param appId App identifier\\n    * @param data Optional data\\n    */\\n    event AppFeePaid(address indexed by, bytes32 appId, bytes data);\\n\\n    /**\\n    * @dev Set the fee amount and token to be used for an app\\n    * @param _appId App identifier\\n    * @param _token Token address to be used for the fees\\n    * @param _amount Fee amount to be charged for the given app\\n    */\\n    function setAppFee(bytes32 _appId, ERC20 _token, uint256 _amount) external;\\n\\n    /**\\n    * @dev Set the fee amount and token to be used for a list of apps\\n    * @param _appIds List of app identifiers\\n    * @param _tokens List of token addresses to be used for the fees for each app\\n    * @param _amounts List of fee amounts to be charged for each app\\n    */\\n    function setAppFees(bytes32[] _appIds, ERC20[] _tokens, uint256[] _amounts) external;\\n\\n    /**\\n    * @dev Remove the fee set for an app\\n    * @param _appId App identifier\\n    */\\n    function unsetAppFee(bytes32 _appId) external;\\n\\n    /**\\n    * @dev Remove the fee set for a list of apps\\n    * @param _appIds List of app identifiers\\n    */\\n    function unsetAppFees(bytes32[] _appIds) external;\\n\\n    /**\\n    * @dev Pay the fees corresponding to an app\\n    * @param _appId App identifier\\n    * @param _data Optional data input\\n    */\\n    function payAppFees(bytes32 _appId, bytes _data) external payable;\\n\\n    /**\\n    * @dev Tell the fee token and amount set for a given app\\n    * @param _appId Identifier of the app being queried\\n    * @return token Fee token address set for the requested app\\n    * @return amount Fee token amount set for the requested app\\n    */\\n    function getAppFee(bytes32 _appId) external view returns (ERC20 token, uint256 amount);\\n}\\n\",\"keccak256\":\"0xcdaa5ef067945cdf0f5c47bb5b8c4e5fa1ab712c9faa3a4d5e255f1ecfeb8634\"},\"contracts/arbitration/IArbitrable.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/standards/ERC165.sol\\\";\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n\\n/**\\n* @title Arbitrable interface\\n* @dev This interface is implemented by `Agreement` so it can be used to submit disputes to an `IArbitrator`.\\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/arbitration/IArbitrable.sol\\n*      since we are using different solidity versions.\\n*/\\ncontract IArbitrable is ERC165 {\\n    bytes4 internal constant ARBITRABLE_INTERFACE_ID = bytes4(0x88f3ee69);\\n\\n    /**\\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\\n    * @param arbitrator IArbitrator instance ruling the dispute\\n    * @param disputeId Identifier of the dispute being ruled by the arbitrator\\n    * @param ruling Ruling given by the arbitrator\\n    */\\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\\n\\n    /**\\n    * @dev Emitted when new evidence is submitted for the IArbitrable instance's dispute\\n    * @param arbitrator IArbitrator submitting the evidence for\\n    * @param disputeId Identifier of the dispute receiving new evidence\\n    * @param submitter Address of the account submitting the evidence\\n    * @param evidence Data submitted for the evidence of the dispute\\n    * @param finished Whether or not the submitter has finished submitting evidence\\n    */\\n    event EvidenceSubmitted(IArbitrator indexed arbitrator, uint256 indexed disputeId, address indexed submitter, bytes evidence, bool finished);\\n\\n    /**\\n    * @dev Submit evidence for a dispute\\n    * @param _disputeId Id of the dispute in the Court\\n    * @param _evidence Data submitted for the evidence related to the dispute\\n    * @param _finished Whether or not the submitter has finished submitting evidence\\n    */\\n    function submitEvidence(uint256 _disputeId, bytes _evidence, bool _finished) external;\\n\\n    /**\\n    * @dev Give a ruling for a certain dispute, the account calling it must have rights to rule on the contract\\n    * @param _disputeId Identifier of the dispute to be ruled\\n    * @param _ruling Ruling given by the arbitrator, where 0 is reserved for \\\"refused to make a decision\\\"\\n    */\\n    function rule(uint256 _disputeId, uint256 _ruling) external;\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARBITRABLE_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x10056905ea86cb2fcce22043eadc1078b7160fbb102f6839cb15b2dccdeb71cd\"},\"contracts/arbitration/IArbitrator.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n\\n/**\\n* @title Arbitrator interface\\n* @dev This interface is the one used by `Agreement` as its dispute resolution protocol.\\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/arbitration/IArbitrator.sol\\n*      since we are using different solidity versions.\\n*/\\ninterface IArbitrator {\\n    /**\\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\n    * @return Dispute identifier\\n    */\\n    function createDispute(uint256 _possibleRulings, bytes _metadata) external returns (uint256);\\n\\n    /**\\n    * @dev Close the evidence period of a dispute\\n    * @param _disputeId Identifier of the dispute to close its evidence submitting period\\n    */\\n    function closeEvidencePeriod(uint256 _disputeId) external;\\n\\n    /**\\n    * @dev Execute the Arbitrable associated to a dispute based on its final ruling\\n    * @param _disputeId Identifier of the dispute to be executed\\n    */\\n    function executeRuling(uint256 _disputeId) external;\\n\\n    /**\\n    * @dev Tell the dispute fees information to create a dispute\\n    * @return recipient Address where the corresponding dispute fees must be transferred to\\n    * @return feeToken ERC20 token used for the fees\\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\\n    */\\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\\n\\n    /**\\n    * @dev Tell the subscription fees information for a subscriber to be up-to-date\\n    * @param _subscriber Address of the account paying the subscription fees for\\n    * @return recipient Address where the corresponding subscriptions fees must be transferred to\\n    * @return feeToken ERC20 token used for the subscription fees\\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\\n    */\\n    function getSubscriptionFees(address _subscriber) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\\n}\\n\",\"keccak256\":\"0x8448e32c2613fb227b8bf88f0a2636ce2199e6e2ed164a9a3daa84c55b809574\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062005f6d83398151915264010000000062004ffb6200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b506200023060008051602062005f6d833981519152826401000000006200562c6200023782021704565b50565b5490565b9055565b615d22806200024b6000396000f3006080604052600436106102365763ffffffff600080516020615cd783398151915260003504166301ffc9a7811461023b57806305132b1a14610289578063079239d4146102ad5780630803fac0146102e95780631180b553146102fe5780631bdd4b7414610338578063221ce7c31461044357806329134768146104a05780632914b9bd146104d15780632a1510901461052a5780632cfbcf1b146105635780632d7b6fba1461058a5780632edc71ba146105cf5780632fb1b25f146105ec578063311a6c561461060457806332c6534b1461061f57806332f0a3b51461064357806336e21a57146106585780633a999604146106865780633b92da72146106c05780633c711e3b146106d85780633e838152146106f05780633ea053eb1461070857806340b437011461072957806365af5248146108515780636ab6802b1461089057806376740b5b146108a85780637e7db6e1146108c05780637e9adccf146108e157806380afdea8146108f95780638b3dd7491461090e5780638f911dca146109235780639d4941d814610938578063a1658fad14610959578063a479e508146109c0578063ac1b2335146109d5578063b658fb14146109ed578063b6e7687314610a02578063b86472b114610af6578063b9e9823f14610b32578063beb12b9014610b5b578063cd253d9914610b70578063cd2b85db14610b85578063d4aae0c414610b9d578063de4796ed14610bb2578063df69433b14610bc7578063e95fdd1d14610bdf578063f891e0e314610c0f575b600080fd5b34801561024757600080fd5b506102757fffffffff0000000000000000000000000000000000000000000000000000000060043516610c5c565b604080519115158252519081900360200190f35b34801561029557600080fd5b50610275600435600160a060020a0360243516610cb9565b3480156102b957600080fd5b506102e7600160a060020a036004358116906024351667ffffffffffffffff60443516606435608435610ce5565b005b3480156102f557600080fd5b50610275610e24565b34801561030a57600080fd5b5061031f600160a060020a0360043516610e4e565b6040805192835290151560208301528051918290030190f35b34801561034457600080fd5b50610350600435610e64565b604051808b81526020018a600160a060020a0316600160a060020a031681526020018967ffffffffffffffff1667ffffffffffffffff168152602001806020018881526020018760058111156103a257fe5b60ff1681526020018615151515815260200185151515158152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b838110156103ff5781810151838201526020016103e7565b50505050905090810190601f16801561042c5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561044f57600080fd5b50610467600160a060020a0360043516602435610fbb565b60408051600160a060020a03909516855267ffffffffffffffff9093166020850152838301919091526060830152519081900360800190f35b3480156104ac57600080fd5b506104b561102f565b60408051600160a060020a039092168252519081900360200190f35b3480156104dd57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104b594369492936024939284019190819084018382808284375094975061103e9650505050505050565b34801561053657600080fd5b50610275600160a060020a036004803582169160248035909116916044359160643590810191013561112e565b34801561056f57600080fd5b5061057861129d565b60408051918252519081900360200190f35b34801561059657600080fd5b506102e7600160a060020a03600480358216916024803515159260443580830193908201359260643590810192013590608435166112c1565b3480156105db57600080fd5b506102e760043560243515156113f9565b3480156105f857600080fd5b506102e7600435611843565b34801561061057600080fd5b506102e76004356024356119b4565b34801561062b57600080fd5b50610275600160a060020a0360043516602435611b7b565b34801561064f57600080fd5b506104b5611b83565b34801561066457600080fd5b506102e760048035906024803591604435151591606435908101910135611c06565b34801561069257600080fd5b506102e7600160a060020a036004358116906024351667ffffffffffffffff60443516606435608435611ee1565b3480156106cc57600080fd5b506102e76004356121e8565b3480156106e457600080fd5b506102756004356122f4565b3480156106fc57600080fd5b506102e7600435612316565b34801561071457600080fd5b506102e7600160a060020a03600435166125ea565b34801561073557600080fd5b50610741600435612715565b6040518085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156107b257818101518382015260200161079a565b50505050905090810190601f1680156107df5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156108125781810151838201526020016107fa565b50505050905090810190601f16801561083f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561085d57600080fd5b506102e760048035600160a060020a0316906024803515159160443580830192908201359160643591820191013561286a565b34801561089c57600080fd5b5061027560043561299a565b3480156108b457600080fd5b506102756004356129b1565b3480156108cc57600080fd5b50610275600160a060020a03600435166129c8565b3480156108ed57600080fd5b506102e76004356129ce565b34801561090557600080fd5b50610578612b9a565b34801561091a57600080fd5b50610578612bca565b34801561092f57600080fd5b50610578612bf5565b34801561094457600080fd5b506102e7600160a060020a0360043516612c19565b34801561096557600080fd5b506040805160206004604435818101358381028086018501909652808552610275958335600160a060020a0316956024803596369695606495939492019291829185019084908082843750949750612ea89650505050505050565b3480156109cc57600080fd5b506104b5613002565b3480156109e157600080fd5b506102756004356130b7565b3480156109f957600080fd5b506105786130d0565b348015610a0e57600080fd5b50610a1a6004356130da565b604051808a600160a060020a0316600160a060020a0316815260200189815260200188815260200187815260200186600160a060020a0316600160a060020a03168152602001851515151581526020018060200184815260200183151515158152602001828103825285818151815260200191508051906020019080838360005b83811015610ab3578181015183820152602001610a9b565b50505050905090810190601f168015610ae05780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b348015610b0257600080fd5b50610b17600160a060020a0360043516613239565b60408051921515835260208301919091528051918290030190f35b348015610b3e57600080fd5b506102e7600480359060248035908101910135604435151561327b565b348015610b6757600080fd5b506102e76134c1565b348015610b7c57600080fd5b5061057861358b565b348015610b9157600080fd5b506102756004356135af565b348015610ba957600080fd5b506104b56135c8565b348015610bbe57600080fd5b506102756135f3565b348015610bd357600080fd5b50610275600435613606565b348015610beb57600080fd5b50610578600480359060248035908101910135600160a060020a036044351661361f565b348015610c1b57600080fd5b50610c27600435613821565b60408051600160a060020a03958616815260208101949094529190931682820152606082019290925290519081900360800190f35b6000610c6782613864565b80610cb357507fffffffff0000000000000000000000000000000000000000000000000000000082167f54053e6c00000000000000000000000000000000000000000000000000000000145b92915050565b600080610cc5846138bd565b8054909150610cdd90600160a060020a031684613968565b949350505050565b604080516000808252602082019092527f2309a8cbbd5c3f18649f3b7ac47a0e7b99756c2ac146dda1ffc80d3f80827be690610d279033908390855b50612ea8565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610de95760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610dae578181015183820152602001610d96565b50505050905090810190601f168015610ddb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160a060020a03871660009081526004602052604090209150610e0d82613add565b610e1b878388888888613b6c565b50505050505050565b600080610e2f612bca565b90508015801590610e47575080610e44613db0565b10155b91505b5090565b600080610e5a83613db4565b9094909350915050565b600080600060606000806000806000806000610e7f8c613ddf565b905080600001549a508060010160009054906101000a9004600160a060020a031699508060010160149054906101000a900467ffffffffffffffff169850806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f555780601f10610f2a57610100808354040283529160200191610f55565b820191906000526020600020905b815481529060010190602001808311610f3857829003601f168201915b50505050509750806003015496508060080160009054906101000a900460ff1695508060080160019054906101000a900460ff1694508060080160029054906101000a900460ff1693508060090154925080600a01549150509193959799509193959799565b600160a060020a038216600090815260046020526040812081908190819081610fe48288613e83565b80546001820154600290920154600160a060020a0382169b7401000000000000000000000000000000000000000090920467ffffffffffffffff169a50919850909650945050505050565b600054600160a060020a031681565b6000611048613002565b600160a060020a03166304bf2a7f836040518263ffffffff16600080516020615cd78339815191520281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110b0578181015183820152602001611098565b50505050905090810190601f1680156110dd5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156110fc57600080fd5b505af1158015611110573d6000803e3d6000fd5b505050506040513d602081101561112657600080fd5b505192915050565b60408051808201909152601d81527f4147525f41434c5f4f5241434c455f5349474e45525f4d495353494e470000006020820152600090819081908185116111bb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5074010000000000000000000000000000000000000000858560008181106111df57fe5b90506020020135106040805190810160405280601e81526020017f4147525f41434c5f4f5241434c455f5349474e45525f4e4f545f41444452000081525090151561126f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b508484600081811061127d57fe5b90506020020135915061128f82613db4565b159998505050505050505050565b7f2309a8cbbd5c3f18649f3b7ac47a0e7b99756c2ac146dda1ffc80d3f80827be681565b6112c9613f3a565b6112d281614002565b6040805190810160405280602081526020017f4147525f5354414b494e475f464143544f52595f4e4f545f434f4e545241435481525090151561135a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905560018080556005819055600755604080516020601f8701819004810282018101909252858152610e1b918991899189908990819084018382808284375050604080516020601f8d018190048102820181019092528b815294508b93508a9250829150840183828082843750614028945050505050565b6000806000806000606060008060606114118b6141aa565b985098509850611420886141d3565b60408051808201909152601981527f4147525f43414e4e4f545f444953505554455f414354494f4e0000000000000060208201529015156114a65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50600489015460408051808201909152601681527f4147525f53454e4445525f4e4f545f414c4c4f574544000000000000000000006020820152600160a060020a03909116965033871461153f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b506115498961421d565b9450611553612b9a565b60068a0154604080516020810193909352828101919091528051808303820181526060909201905293506115898989878761423e565b600889015460058b01805460408051602060026101006001861615026000190190941693909304601f81018490048402820184019092528181529497506201000090930460ff16955061163b93899388938c939091908301828280156116305780601f1061160557610100808354040283529160200191611630565b820191906000526020600020905b81548152906001019060200180831161161357829003601f168201915b50505050508e614427565b6001888101546002808b01805460408051602061010097841615979097026000190190921693909304601f81018690048602820186019093528281526116e8948a948994600160a060020a0390911693918301828280156116dd5780601f106116b2576101008083540402835291602001916116dd565b820191906000526020600020905b8154815290600101906020018083116116c057829003601f168201915b505050505086614427565b8980156116f25750815b156117d4575060408051602480820185905282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7e9adccf00000000000000000000000000000000000000000000000000000000178152915181519192600160a060020a03881692849291829180838360005b83811015611791578181015183820152602001611779565b50505050905090810190601f1680156117be5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af15050505b600888018054600260ff199091161761ff0019166101008c1515021790556009808901849055600084815260209190915260408082208990555188918d917fb2a3bed46edbfc66a891dcf5e64cb46ed0dc8ad2554ed69eac73085bc1e15b4d9190a35050505050505050505050565b33600090815260036020908152604091829020548251808401909352601983527f4147525f5349474e45525f414c52454144595f5349474e45440000000000000091830191909152908282106118de5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5060015460408051808201909152601b81527f4147525f494e56414c49445f5349474e494e475f53455454494e47000000000060208201529083106119685760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5033600081815260036020908152604091829020859055815185815291517ff4b7ab5b8fc49d6d35d323cae6a96e1441b461f862dfc5aff92e806e2839b5b09281900390910190a25050565b60008060008060006119c5876144f3565b94509450945094506119d682614526565b60408051808201909152601681527f4147525f43414e4e4f545f52554c455f414354494f4e000000000000000000006020820152901515611a5c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50611a668461421d565b60408051808201909152601681527f4147525f53454e4445525f4e4f545f414c4c4f574544000000000000000000006020820152909150600160a060020a0382163314611af85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50600a82018690556040805187815290518891600160a060020a038416917f56c8631a8915c0d362dbe57a61215fdde954f73f81c8a3a1f55572fb015207b19181900360200190a36004861415611b5a57611b5585858585614545565b610e1b565b6003861415611b6f57611b5585858585614656565b610e1b85858585614790565b600092915050565b6000611b8d6135c8565b600160a060020a03166332f0a3b56040518163ffffffff16600080516020615cd7833981519152028152600401602060405180830381600087803b158015611bd457600080fd5b505af1158015611be8573d6000803e3d6000fd5b505050506040513d6020811015611bfe57600080fd5b505190505b90565b600080600080611c15896138bd565b9350611c20846148c7565b60408051808201909152601b81527f4147525f43414e4e4f545f4348414c4c454e47455f414354494f4e00000000006020820152901515611ca65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50611cb084614944565b92509250611cbe8333613968565b6040805190810160405280602081526020017f4147525f53454e4445525f43414e545f4348414c4c454e47455f414354494f4e815250901515611d465760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50600182015460408051808201909152601c81527f4147525f494e56414c49445f534554544c454d454e545f4f4646455200000000602082015290891115611dd35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50611e13898533858c8c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843750614975945050505050565b600685018190556001850154604080517f7f439ce000000000000000000000000000000000000000000000000000000000815260048101929092526024820183905233604483015251919250600160a060020a03851691637f439ce09160648082019260009290919082900301818387803b158015611e9157600080fd5b505af1158015611ea5573d6000803e3d6000fd5b50506040518392508b91507f43e6ee6f565b58c6e3d7d297e76958632fc3e845fa6346b569d81205408855a890600090a3505050505050505050565b60408051600080825260208201909252819081907f2309a8cbbd5c3f18649f3b7ac47a0e7b99756c2ac146dda1ffc80d3f80827be690611f25903390839085610d21565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611fab5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50611fb589614002565b60408051808201909152601b81527f4147525f44495350555441424c455f4e4f545f434f4e54524143540000000000602082015290151561203b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50600160a060020a0389166000908152600460205260409020935061205f84614b89565b835460ff19166001178455604080517fbca60cf500000000000000000000000000000000000000000000000000000000815290518a94503091600160a060020a0386169163bca60cf5916004808201926020929091908290030181600087803b1580156120cb57600080fd5b505af11580156120df573d6000803e3d6000fd5b505050506040513d60208110156120f557600080fd5b5051600160a060020a03161461219b57604080517f1e9ae2f40000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03851691631e9ae2f491602480830192600092919082900301818387803b15801561216557600080fd5b505af1158015612179573d6000803e3d6000fd5b505050508360010154915060008211612193576001612195565b815b60018501555b6121a983858a8a8a8a613b6c565b604051600160a060020a038416907fd0ffe42a6295a578201aed3601630a6136d6e00fda266cf0dbf9dd7be1c11a7990600090a2505050505050505050565b6000806121f4836138bd565b600481015490925074010000000000000000000000000000000000000000900460ff1615612221576122ef565b61222a82614c13565b60408051808201909152601781527f4147525f43414e4e4f545f434c4f53455f414354494f4e00000000000000000060208201529015156122b05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b506122ba82614944565b6003810154600485015460018301549294506122e59350600160a060020a0391821692911690614ccd565b6122ef8383614d5e565b505050565b600080612300836141aa565b5091505061230d81614526565b91505b50919050565b6000806000806000806000806000806000806123318d6141aa565b6004830154929e50909c509a50600160a060020a03169850338914156123e65761235a8b614dce565b60408051808201909152601881527f4147525f43414e4e4f545f534554544c455f414354494f4e000000000000000060208201529015156123e05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50612477565b6123ef8b614dd9565b60408051808201909152601881527f4147525f43414e4e4f545f534554544c455f414354494f4e000000000000000060208201529015156124755760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b505b6124808c614944565b97509750866001015495508a600301549450858510156124a057846124a2565b855b60018c015460038901549195508588039450600160a060020a0390811693501690506124cf818a85614ccd565b6124db818a8487614e22565b865460028801546124f791600160a060020a0316908490614ea7565b60048b015460058c015461251691600160a060020a0316908490614ea7565b60088b01805460ff191660019081179091558c0154604080517ff83a1515000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a038a169163f83a151591602480830192600092919082900301818387803b15801561258c57600080fd5b505af11580156125a0573d6000803e3d6000fd5b50506040518c92508f91507f1085b774562bcd99aae2e239890e1fe1922552d9a331eae9dc755d535d2bca0e90600090a36125db8d8d614d5e565b50505050505050505050505050565b604080516000808252602082019092527f2309a8cbbd5c3f18649f3b7ac47a0e7b99756c2ac146dda1ffc80d3f80827be69061262a903390839085610d21565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156126b05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50600160a060020a038316600090815260046020526040902091506126d482613add565b815460ff19168255604051600160a060020a038416907f0856d2e58a20e983094def11432f91b5603c266814eecf5189accda0edd92a5a90600090a2505050565b600080606080600061272686614f50565b805460018083015460028085018054604080516020601f600019988516156101000298909801909316949094049586018290048202840182019052848352600160a060020a039586169b509290941698509394508301828280156127cb5780601f106127a0576101008083540402835291602001916127cb565b820191906000526020600020905b8154815290600101906020018083116127ae57829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815294975091925083018282801561285b5780601f106128305761010080835404028352916020019161285b565b820191906000526020600020905b81548152906001019060200180831161283e57829003601f168201915b50505050509150509193509193565b604080516000808252602082019092527f07813bca4905795fa22783885acd0167950db28f2d7a40b70f666f429e19f1d9916128aa913391849190610d21565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156129305760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50610e1b878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8d018190048102820181019092528b815294508b93508a9250829150840183828082843750614028945050505050565b6000806129a6836138bd565b905061230d816148c7565b6000806129bd836138bd565b905061230d81614c13565b50600090565b60008060006129dc846144f3565b9450509350506129eb82614526565b60408051808201909152601a81527f4147525f43414e4e4f545f5355424d49545f45564944454e43450000000000006020820152901515612a715760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b506008820154610100900460ff168015612a955750600882015462010000900460ff165b6040805190810160405280602081526020017f4147525f43414e4e4f545f434c4f53455f45564944454e43455f504552494f44815250901515612b1d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50612b278361421d565b905080600160a060020a0316637e9adccf856040518263ffffffff16600080516020615cd783398151915202815260040180828152602001915050600060405180830381600087803b158015612b7c57600080fd5b505af1158015612b90573d6000803e3d6000fd5b5050505050505050565b6000612bc57fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b614ffb565b905090565b6000612bc57febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e614ffb565b7fef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d81565b6000806000612c27846129c8565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515612cad5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50612cb6611b83565b9250612cc183614002565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515612d475760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50600160a060020a0384161515612d985760405130319250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015612d92573d6000803e3d6000fd5b50612e57565b5082612db3600160a060020a0382163063ffffffff61500316565b9150612dcf600160a060020a038216848463ffffffff61511816565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515612e555760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080612eb3610e24565b1515612ec25760009150612ffa565b612eca6135c8565b9050600160a060020a0381161515612ee55760009150612ffa565b80600160a060020a031663fdef9106863087612f00886151a3565b604051600080516020615cd783398151915263ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b83811015612f7c578181015183820152602001612f64565b50505050905090810190601f168015612fa95780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612fcb57600080fd5b505af1158015612fdf573d6000803e3d6000fd5b505050506040513d6020811015612ff557600080fd5b505191505b509392505050565b60008061300d6135c8565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b1580156110fc57600080fd5b6000806130c3836141aa565b5091505061230d816141d3565b6000612bc56151ad565b60008060008060008060606000806000806130f48c6138bd565b91508160000160009054906101000a9004600160a060020a03169a508160010154995081600201549850816003015497508160040160009054906101000a9004600160a060020a031696508160040160149054906101000a900460ff169550816005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131eb5780601f106131c0576101008083540402835291602001916131eb565b820191906000526020600020905b8154815290600101906020018083116131ce57829003601f168201915b5050505050945081600601549350600084111561322a5761320b8c6141aa565b50915050613218816151c3565b80613227575061322781614526565b92505b50509193959799909294969850565b600160a060020a03811660009081526004602052604081208054600182015460ff909116929190801561326f5760018103613272565b60005b92505050915091565b600080600080600061328c896144f3565b96505095505061329b84614526565b60408051808201909152601a81527f4147525f43414e4e4f545f5355424d49545f45564944454e434500000000000060208201529015156133215760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5061332b8561421d565b6004860154909350600160a060020a03163314156133b2576008840154610100900460ff16806133585750855b9150613398838a338b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437508b94506144279350505050565b60088401805461ff001916610100841515021790556134b6565b6001840154600160a060020a031633141561343957600884015462010000900460ff16806133dd5750855b905061341d838a338b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437508a94506144279350505050565b60088401805462ff0000191662010000831515021790556134b6565b604080518082018252601681527f4147525f53454e4445525f4e4f545f414c4c4f574544000000000000000000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610dae578181015183820152602001610d96565b505050505050505050565b60008060006134d66134d16151ad565b614f50565b80549093506134ed90600160a060020a03166151cb565b6001840154909250600160a060020a031690508015801590613521575081600160a060020a031681600160a060020a031614155b156122ef57600183018054600160a060020a03841673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f5c20330e5ee6de3e038fed5a36f3a187d54bd029f64795d55ef2c4c8f6f9f0579181900360200190a1505050565b7f07813bca4905795fa22783885acd0167950db28f2d7a40b70f666f429e19f1d981565b6000806135bb836141aa565b5091505061230d81614dd9565b6000612bc57f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b614ffb565b6000600019613600612bca565b14905090565b600080613612836141aa565b5091505061230d81614dce565b336000908152600460205260408120818080808080808061363f89613add565b6136476151ad565b600160a060020a038c16600090815260036020908152604091829020548251808401909352601483527f4147525f5349474e45525f4d5553545f5349474e000000000000000000000000918301919091529199509097508789146136f05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50600189600101540395506137058987613e83565b6003810154600182015491965061372991600160a060020a03909116908d9061525a565b60058054600181019091556000818152600660205260409020909450925061375088614f50565b915033905061376182828d876152d3565b808360000160006101000a815481600160a060020a030219169083600160a060020a031602179055508d83600101819055508583600201819055508783600301819055508a8360040160006101000a815481600160a060020a030219169083600160a060020a031602179055508c8c8460050191906137e1929190615bd4565b50604051339085907fdaa0424e8d4e6b8fe642d59657ad0644830036b48391ed9f3e246a0f440809ae90600090a350919c9b505050505050505050505050565b600080600080600061383286613ddf565b600681015460078201546004830154600590930154600160a060020a039283169a919950919092169650945092505050565b600061386f826155ba565b80610cb35750507fffffffff00000000000000000000000000000000000000000000000000000000167f88f3ee69000000000000000000000000000000000000000000000000000000001490565b600080821180156138cf575060055482105b60408051808201909152601981527f4147525f414354494f4e5f444f45535f4e4f545f45584953540000000000000060208201529015156139555760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5050600090815260066020526040902090565b60008060606139756135c8565b9150600160a060020a03821615156139905760009250613ad5565b6139a161399c85615604565b6151a3565b6040517ffdef9106000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830190815288821660248401527fef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d604484018190526080606485019081528551608486015285519596509287169463fdef9106948a948c948993909260a40190602085019080838360005b83811015613a57578181015183820152602001613a3f565b50505050905090810190601f168015613a845780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613aa657600080fd5b505af1158015613aba573d6000803e3d6000fd5b505050506040513d6020811015613ad057600080fd5b505192505b505092915050565b805460408051808201909152601981527f4147525f44495350555441424c455f4e4f545f4143544956450000000000000060208201529060ff161515613b685760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5050565b6000806000613b7a87614002565b60408051808201909152601681527f4147525f544f4b454e5f4e4f545f434f4e5452414354000000000000000000006020820152901515613c005760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5060008054604080517fc646a93c000000000000000000000000000000000000000000000000000000008152600160a060020a038b811660048301529151919092169263c646a93c92602480820193602093909283900390910190829087803b158015613c6c57600080fd5b505af1158015613c80573d6000803e3d6000fd5b505050506040513d6020811015613c9657600080fd5b810190808051906020019092919050505092508760010160008154809291906001019190505591508760020160008381526020019081526020016000209050868160000160006101000a815481600160a060020a030219169083600160a060020a03160217905550858160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550848160010181905550838160020181905550828160030160006101000a815481600160a060020a030219169083600160a060020a0316021790555088600160a060020a03167f4efea8c074f09ca85002d7b9f73509f40f8e954cef7bf647c8a1fc69ad58d9c5836040518082815260200191505060405180910390a2505050505050505050565b4390565b600160a060020a03811660009081526003602052604081205490613dd66151ad565b82109050915091565b6000613dea82615618565b60408051808201909152601c81527f4147525f4348414c4c454e47455f444f45535f4e4f545f4558495354000000006020820152901515613e705760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5050600090815260086020526040902090565b600080600083118015613e995750836001015483105b60408051808201909152601a81527f4147525f434f4c5f5245515f444f45535f4e4f545f45584953540000000000006020820152909150811515613f225760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50505060009081526002919091016020526040902090565b613f42612bca565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015613fc75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50614000613fd3613db0565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61562c16565b565b600080600160a060020a038316151561401e5760009150612310565b50506000903b1190565b60008061403486614002565b60408051808201909152601b81527f4147525f41524249545241544f525f4e4f545f434f4e5452414354000000000060208201529015156140ba5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b50506001805480820190915560008181526002602081815260409092208651939450926140ed9291840191870190615c4e565b5082516141039060038301906020860190615c4e565b50805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161781558461413657600061413f565b61413f866151cb565b60018201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556040805183815290517fae9caf5307484416d509bfcd90a554f883f557bf4d6ea368bdd803b7ec174cb6916020908290030190a1505050505050565b60008060006141b8846138bd565b9250826006015490506141ca81613ddf565b91509193909250565b60006141de826151c3565b8015610cb357506141ed615630565b600183015467ffffffffffffffff7401000000000000000000000000000000000000000090910416119050919050565b60008061422d8360030154614f50565b54600160a060020a03169392505050565b60008060008060008087600160a060020a0316637b751b9e6040518163ffffffff16600080516020615cd7833981519152028152600401606060405180830381600087803b15801561428f57600080fd5b505af11580156142a3573d6000803e3d6000fd5b505050506040513d60608110156142b957600080fd5b508051602082015160409092015160068c01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038086169190911790915560078d0182905560048e01549298509296509450169150614318848385615634565b6143238486856156de565b604080517fc13517e1000000000000000000000000000000000000000000000000000000008152600260048201818152602483019384528a5160448401528a51600160a060020a038d169463c13517e1948d9392606490910190602085019080838360005b838110156143a0578181015183820152602001614388565b50505050905090810190601f1680156143cd5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156143ed57600080fd5b505af1158015614401573d6000803e3d6000fd5b505050506040513d602081101561441757600080fd5b50519a9950505050505050505050565b6000825111156144ec5782600160a060020a03168486600160a060020a03167f1988e4d59f596ba1a2d81e06874704a62502463ae6d99154f923e5edeb98392b8585604051808060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156144b0578181015183820152602001614498565b50505050905090810190601f1680156144dd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a45b5050505050565b60008181526009602052604081205481908161450e82613ddf565b80549450905061451d846138bd565b92509193509193565b600060025b600883015460ff16600581111561453e57fe5b1492915050565b60088101805460ff191660031790556004830154600160a060020a031660008061456e86614944565b8054600282015492945090925061459291600160a060020a03909116908590614ea7565b600484015460058501546145b191600160a060020a0316908590614ea7565b81600160a060020a0316637ad267b687600101546040518263ffffffff16600080516020615cd783398151915202815260040180828152602001915050600060405180830381600087803b15801561460857600080fd5b505af115801561461c573d6000803e3d6000fd5b50506040518792508991507fe22a91e75f41c1eb6b719a97482597fdbe1a132d3287933498dba5467d59a68790600090a350505050505050565b60088101805460ff191660041790556001810154600160a060020a031660008061467f86614944565b6003810154600489015460018301549395509193506146af92600160a060020a0391821692909116908690614e22565b805460028201546146cb91600160a060020a0316908590614ea7565b600484015460058501546146ea91600160a060020a0316908590614ea7565b81600160a060020a031663f83a151587600101546040518263ffffffff16600080516020615cd783398151915202815260040180828152602001915050600060405180830381600087803b15801561474157600080fd5b505af1158015614755573d6000803e3d6000fd5b50506040518792508991507fe1a2ee51259a3832b7a409c9ac09f6749999247798a2b9034c17bbb8431747b790600090a3610e1b8787614d5e565b60088101805460ff1916600517905560008080808080806147b08a614944565b60018a015481546002830154939a50919850600160a060020a0390811697506147dd929116908790614ea7565b50505050600484810154600586015491880154600160a060020a0391821692916002830491828403916148139186911684614ea7565b61481e848683614ea7565b86600160a060020a031663b08630638b600101546040518263ffffffff16600080516020615cd783398151915202815260040180828152602001915050600060405180830381600087803b15801561487557600080fd5b505af1158015614889573d6000803e3d6000fd5b50506040518b92508d91507f6fc5fbdcd245dd8caeb8ddbdd14c7a3cb8c2ce5b6a5d654e2f2b4dd64426be7390600090a35050505050505050505050565b60006148d282615829565b8015610cb3575081546001830154604080517f6ab6802b000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691636ab6802b916024808201926020929091908290030181600087803b1580156110fc57600080fd5b8054600160a060020a03166000818152600460205260408120600284015461496d908290613e83565b915050915091565b60078054600180820190925560008181526008602052604081208a8155928301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a161790558654909290839081908190614a0a9074010000000000000000000000000000000000000000900467ffffffffffffffff166149f46158b8565b67ffffffffffffffff169063ffffffff6158ca16565b60018501805467ffffffffffffffff9290921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9092169190911790558651614a7390600286019060208a0190615c4e565b506003840189905560088401805462ff00001916620100008a151502179055895460028b0154614aae91600160a060020a0316908d90615634565b614ab78c61421d565b925082600160a060020a0316637b751b9e6040518163ffffffff16600080516020615cd7833981519152028152600401606060405180830381600087803b158015614b0157600080fd5b505af1158015614b15573d6000803e3d6000fd5b505050506040513d6060811015614b2b57600080fd5b50602081015160409091015160048601805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038416179055600586018190559092509050614b78828c83615634565b50929b9a5050505050505050505050565b805460408051808201909152601d81527f4147525f44495350555441424c455f414c52454144595f41435449564500000060208201529060ff1615613b685760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b600080614c1f83615829565b1515614c2e5760009150612310565b508154600160a060020a03163381148061230d575080600160a060020a03166376740b5b84600101546040518263ffffffff16600080516020615cd783398151915202815260040180828152602001915050602060405180830381600087803b158015614c9a57600080fd5b505af1158015614cae573d6000803e3d6000fd5b505050506040513d6020811015614cc457600080fd5b50519392505050565b801515614cd9576122ef565b604080517f59508f8f000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152306024830152604482018490529151918516916359508f8f9160648082019260009290919082900301818387803b158015614d4a57600080fd5b505af1158015610e1b573d6000803e3d6000fd5b6004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905560405182907ffd0589b9682733317d7f3b84a13bb57660efd49cad1cf97d6e04eec435ce605c90600090a25050565b6000610cb3826151c3565b6000614de4826151c3565b8015610cb35750600182015474010000000000000000000000000000000000000000900467ffffffffffffffff16614e1a615630565b101592915050565b801515614e2e57614ea1565b604080517f58f21872000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916358f218729160648082019260009290919082900301818387803b158015612b7c57600080fd5b50505050565b60008111156122ef57614eca600160a060020a038416838363ffffffff61511816565b60408051808201909152601981527f4147525f544f4b454e5f5452414e534645525f4641494c4544000000000000006020820152901515614ea15760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b60008082118015614f62575060015482105b60408051808201909152601a81527f4147525f53455454494e475f444f45535f4e4f545f45584953540000000000006020820152901515614fe85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5050600090815260026020526040902090565b5490565b5490565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806150838684615965565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f5245564552544544000000006020820152919350915082151561510e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061519a8582615996565b95945050505050565b8051602002815290565b60006001546000146129c8576001805403612bc5565b60008061452b565b604080517fe3f2311e00000000000000000000000000000000000000000000000000000000815230600482015290516000918291600160a060020a0385169163e3f2311e91602480830192606092919082900301818787803b15801561523057600080fd5b505af1158015615244573d6000803e3d6000fd5b505050506040513d6060811015614cc457600080fd5b801515615266576122ef565b82600160a060020a031663282d3fdf83836040518363ffffffff16600080516020615cd78339815191520281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015614d4a57600080fd5b6001840154600160a060020a031660008080808415156152f2576134b6565b87600160a060020a03166380afdea86040518163ffffffff16600080516020615cd7833981519152028152600401602060405180830381600087803b15801561533a57600080fd5b505af115801561534e573d6000803e3d6000fd5b505050506040513d602081101561536457600080fd5b5051604080517fdc6839ba000000000000000000000000000000000000000000000000000000008152600481018390528151929650600160a060020a0388169263dc6839ba926024808401939192918290030181600087803b1580156153c957600080fd5b505af11580156153dd573d6000803e3d6000fd5b505050506040513d60408110156153f357600080fd5b508051602090910151909350915081151561540d576134b6565b60008054604080517fc646a93c000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151919092169263c646a93c92602480820193602093909283900390910190829087803b15801561547857600080fd5b505af115801561548c573d6000803e3d6000fd5b505050506040513d60208110156154a257600080fd5b505190506154b181888461525a565b6154bd81883085614e22565b6154c88386846156de565b6040805160208082018990528251808303820181528284018085527fe21b27780000000000000000000000000000000000000000000000000000000090526044830188815260648401948552815160848501528151600160a060020a038b169563e21b2778958b95919260a49091019185019080838360005b83811015615559578181015183820152602001615541565b50505050905090810190601f1680156155865780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156155a657600080fd5b505af11580156125db573d6000803e3d6000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6060610cb382600160a060020a03166159e4565b60008082118015610cb35750506007541190565b9055565b4290565b60008111156122ef57615658600160a060020a03841683308463ffffffff615a2516565b60408051808201909152601881527f4147525f544f4b454e5f4445504f5349545f4641494c454400000000000000006020820152901515614ea15760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b60008111156122ef57615702600160a060020a03841683600063ffffffff615ab916565b60408051808201909152601981527f4147525f544f4b454e5f415050524f56414c5f4641494c45440000000000000060208201529015156157885760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b506157a3600160a060020a038416838363ffffffff615ab916565b60408051808201909152601981527f4147525f544f4b454e5f415050524f56414c5f4641494c4544000000000000006020820152901515614ea15760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b6000806000808460040160149054906101000a900460ff161561584f57600093506158b0565b8460060154925061585f83615618565b151561586e57600193506158b0565b505060008181526008602081905260409091209081015460ff16600381600581111561589657fe5b14806158ad575060058160058111156158ab57fe5b145b93505b505050919050565b6000612bc56158c5615630565b615b3b565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff8086169083161015612ffa5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b6000806000806040516020818751602089018a5afa9250600083111561598a57805191505b50909590945092505050565b6000806040516020818551602087016000895af160008111156159da573d80156159c757602081146159d0576159d8565b600193506159d8565b600183511493505b505b5090949350505050565b6040805160018082528183019092526060916020808301908038833901905050905081816000815181101515615a1657fe5b60209081029091010152919050565b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052600090615aaf8682615996565b9695505050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905260009061519a8582615996565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff831115615bcd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610dae578181015183820152602001610d96565b5090919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615c155782800160ff19823516178555615c42565b82800160010185558215615c42579182015b82811115615c42578235825591602001919060010190615c27565b50610e4a929150615cbc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615c8f57805160ff1916838001178555615c42565b82800160010185558215615c42579182015b82811115615c42578251825591602001919060010190615ca1565b611c0391905b80821115610e4a5760008155600101615cc256000000000100000000000000000000000000000000000000000000000000000000a165627a7a72305820a26c143cba1877b6265abdb79d604eae3d550e41cb2066715f39889576c6c9b90029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "activate(address,address,uint64,uint256,uint256)": {
        "details": "Initialization check is implicitly provided by the `auth()` modifier",
        "params": {
          "_actionAmount": "Amount of collateral tokens that will be locked every time an action is submitted",
          "_challengeAmount": "Amount of collateral tokens that will be locked every time an action is challenged",
          "_challengeDuration": "Challenge duration, during which the submitter can raise a dispute",
          "_collateralToken": "Address of the ERC20 token to be used for collateral",
          "_disputableAddress": "Address of the Disputable app"
        }
      },
      "allowRecoverability(address)": {
        "details": "Disable built-in AragonApp token recovery escape hatch.     This app is intended to hold users' funds and we do not want to allow them to be transferred to the default vault.",
        "return": "Always false"
      },
      "canChallenge(uint256)": {
        "details": "Tell whether an action can be challenged",
        "params": {
          "_actionId": "Identification number of the action"
        },
        "return": "True if the action can be challenged, false otherwise"
      },
      "canClaimSettlement(uint256)": {
        "details": "Tell whether an action can be settled by claiming its challenge settlement",
        "params": {
          "_actionId": "Identification number of the action"
        },
        "return": "True if the action settlement can be claimed, false otherwise"
      },
      "canClose(uint256)": {
        "details": "Tell whether an action can be manually closed.     An action can be closed if it is allowed to:      - Proceed in the context of this Agreement (see `_canProceed()`), and      - Be closed in the context of the originating Disputable app",
        "params": {
          "_actionId": "Identification number of the action"
        },
        "return": "True if the action can be closed, false otherwise"
      },
      "canDispute(uint256)": {
        "details": "Tell whether an action can be disputed",
        "params": {
          "_actionId": "Identification number of the action"
        },
        "return": "True if the action can be disputed, false otherwise"
      },
      "canPerform(address,address,bytes32,uint256[])": {
        "details": "ACL oracle interface conformance",
        "return": "True if a parameterized address has signed the current version of the Agreement, false otherwise"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "canPerformChallenge(uint256,address)": {
        "details": "Tell whether an address can challenge an action",
        "params": {
          "_actionId": "Identification number of the action",
          "_challenger": "Address of the challenger"
        },
        "return": "True if the challenger can challenge the action, false otherwise"
      },
      "canRuleDispute(uint256)": {
        "details": "Tell whether an action's dispute can be ruled",
        "params": {
          "_actionId": "Identification number of the action"
        },
        "return": "True if the action's dispute can be ruled, false otherwise"
      },
      "canSettle(uint256)": {
        "details": "Tell whether an action can be settled",
        "params": {
          "_actionId": "Identification number of the action"
        },
        "return": "True if the action can be settled, false otherwise"
      },
      "canUnlock(address,uint256)": {
        "details": "ILockManager conformance.     The Staking contract checks this on each request to unlock an amount managed by this Agreement.     It always returns false to disable owners from unlocking their funds arbitrarily, as we     want to control the release of the locked amount when actions are closed or settled.",
        "return": "Whether the request to unlock tokens of a given owner should be allowed"
      },
      "challengeAction(uint256,uint256,bool,bytes)": {
        "details": "This is only callable by those who hold the CHALLENGE_ROLE on the related Disputable app.     Can be called multiple times per action, until a challenge is successful (settled or ruled for challenger).     Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.",
        "params": {
          "_actionId": "Identification number of the action to be challenged",
          "_context": "Link to a human-readable context for the challenge",
          "_finishedEvidence": "Whether the challenger is finished submitting evidence with the challenge context",
          "_settlementOffer": "Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator"
        }
      },
      "changeCollateralRequirement(address,address,uint64,uint256,uint256)": {
        "details": "Initialization check is implicitly provided by the `auth()` modifier",
        "params": {
          "_actionAmount": "Amount of collateral tokens that will be locked every time an action is submitted",
          "_challengeAmount": "Amount of collateral tokens that will be locked every time an action is challenged",
          "_challengeDuration": "Challenge duration, during which the submitter can raise a dispute",
          "_collateralToken": "Address of the ERC20 token to be used for collateral",
          "_disputable": "Address of the Disputable app"
        }
      },
      "changeSetting(address,bool,string,bytes)": {
        "details": "Initialization check is implicitly provided by the `auth()` modifier",
        "params": {
          "_arbitrator": "Address of the IArbitrator that will be used to resolve disputes",
          "_content": "Link to a human-readable text that describes the new rules for the Agreement",
          "_setAppFeesCashier": "Whether to integrate with the IArbitrator's fee cashier",
          "_title": "String indicating a short description"
        }
      },
      "closeAction(uint256)": {
        "details": "This function closes actions that:     - Are not currently challenged nor disputed, or     - Were previously disputed but ruled in favour of the submitter or voided     Disputable apps may call this method directly at the end of an action, but is also accessible in a permission-less manner     in case the app does not close its own actions automatically (e.g. disputable votes that don't pass).     Can be called multiple times; it does nothing if the action is already closed.     Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.",
        "params": {
          "_actionId": "Identification number of the action to be closed"
        }
      },
      "closeEvidencePeriod(uint256)": {
        "details": "Callable by any account.     Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.",
        "params": {
          "_disputeId": "Identification number of the dispute on the arbitrator"
        }
      },
      "deactivate(address)": {
        "details": "Initialization check is implicitly provided by the `auth()` modifier",
        "params": {
          "_disputableAddress": "Address of the Disputable app to be deactivated"
        }
      },
      "disputeAction(uint256,bool)": {
        "details": "Only the action submitter can create a dispute for an action with an open challenge.     Can only be called once (if at all) per opened challenge.     Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.",
        "params": {
          "_actionId": "Identification number of the action to be disputed",
          "_submitterFinishedEvidence": "Whether the submitter was finished submitting evidence with their action context"
        }
      },
      "getAction(uint256)": {
        "details": "Tell the information related to an action",
        "params": {
          "_actionId": "Identification number of the action"
        },
        "return": "disputable Address of the Disputable app that created the actiondisputableActionId Identification number of the action on the Disputable appcollateralRequirementId Identification number of the collateral requirement applicable to the actionsettingId Identification number of the agreement setting applicable to the actionsubmitter Address that submitted the actionclosed Whether the action is closedcontext Link to a human-readable context for the actionlastChallengeId Identification number of the action's most recent challenge, if anylastChallengeActive Whether the action's most recent challenge is still ongoing"
      },
      "getChallenge(uint256)": {
        "details": "Tell the information related to an action challenge",
        "params": {
          "_challengeId": "Identification number of the challenge"
        },
        "return": "actionId Identification number of the action associated to the challengechallenger Address that challenged the actionendDate Datetime of the last date the submitter can raise a dispute against the challengecontext Link to a human-readable context for the challengesettlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitratorstate Current state of the challengesubmitterFinishedEvidence Whether the action submitter has finished submitting evidence for the associated disputechallengerFinishedEvidence Whether the action challenger has finished submitting evidence for the associated disputedisputeId Identification number of the associated dispute on the arbitratorruling Ruling given from the arbitrator for the dispute"
      },
      "getChallengeArbitratorFees(uint256)": {
        "details": "Tell the arbitration fees paid for an action challenge     Split from `getChallenge()` due to “stack too deep issues”",
        "params": {
          "_challengeId": "Identification number of the challenge"
        },
        "return": "submitterArbitratorFeesToken ERC20 token used for the arbitration fees paid by the submitter (on dispute creation)submitterArbitratorFeesAmount Amount of arbitration fees paid by the submitter (on dispute creation)challengerArbitratorFeesToken ERC20 token used for the arbitration fees paid by the challenger (in advance)challengerArbitratorFeesAmount Amount of arbitration fees paid by the challenger (in advance)"
      },
      "getCollateralRequirement(address,uint256)": {
        "details": "Tell the information related to a collateral requirement of a Disputable app",
        "params": {
          "_collateralRequirementId": "Identification number of the collateral requirement",
          "_disputable": "Address of the Disputable app"
        },
        "return": "collateralToken Address of the ERC20 token to be used for collateralactionAmount Amount of collateral tokens that will be locked every time an action is createdchallengeAmount Amount of collateral tokens that will be locked every time an action is challengedchallengeDuration Challenge duration, during which the submitter can raise a dispute"
      },
      "getCurrentSettingId()": {
        "details": "Tell the identification number of the current agreement setting",
        "return": "Identification number of the current agreement setting"
      },
      "getDisputableInfo(address)": {
        "details": "Tell the information related to a Disputable app",
        "params": {
          "_disputable": "Address of the Disputable app"
        },
        "return": "activated Whether the Disputable app is activecurrentCollateralRequirementId Identification number of the current collateral requirement"
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "getSetting(uint256)": {
        "details": "Tell the information related to an agreement setting",
        "params": {
          "_settingId": "Identification number of the agreement setting"
        },
        "return": "arbitrator Address of the IArbitrator that will be used to resolve disputesaragonAppFeesCashier Address of the fees cashier to deposit action fees (linked to the selected arbitrator)title String indicating a short descriptioncontent Link to a human-readable text that describes the current rules for the Agreement"
      },
      "getSigner(address)": {
        "details": "Tell the information related to a signer",
        "params": {
          "_signer": "Address of signer"
        },
        "return": "lastSettingIdSigned Identification number of the last agreement setting signed by the signermustSign Whether the requested signer needs to sign the current agreement setting before submitting an action"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "initialize(address,bool,string,bytes,address)": {
        "params": {
          "_arbitrator": "Address of the IArbitrator that will be used to resolve disputes",
          "_content": "Link to a human-readable text that describes the initial rules for the Agreement",
          "_setAppFeesCashier": "Whether to integrate with the IArbitrator's fee cashier",
          "_stakingFactory": "Staking factory for finding each collateral token's staking pool",
          "_title": "String indicating a short description"
        }
      },
      "newAction(uint256,bytes,address)": {
        "details": "This function should be called from the Disputable app each time a new disputable action is created.     Each disputable action ID must only be registered once; this is how the Agreement gets notified about each disputable action.     Initialization check is implicitly provided by `_ensureActiveDisputable()` as Disputable apps can only be activated     via `activate()` which already requires initialization.     IMPORTANT: Note the responsibility of the Disputable app in terms of providing the correct `_submitter` parameter.     Users are required to trust that all Disputable apps activated with this Agreement have implemented this correctly, as     otherwise funds could be maliciously locked from the incorrect account on new actions.",
        "params": {
          "_context": "Link to a human-readable context for the given action",
          "_disputableActionId": "Identification number of the action on the Disputable app",
          "_submitter": "Address that submitted the action"
        },
        "return": "Unique identification number for the created action on the Agreement"
      },
      "rule(uint256,uint256)": {
        "details": "Can only be called once per challenge by the associated abitrator.     Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.",
        "params": {
          "_disputeId": "Identification number of the dispute on the arbitrator",
          "_ruling": "Ruling given by the arbitrator"
        }
      },
      "settleAction(uint256)": {
        "details": "This can be accessed by both the submitter (at any time) or any account (after the settlement period has passed).     Can only be called once (if at all) per opened challenge.     Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.",
        "params": {
          "_actionId": "Identification number of the action to be settled"
        }
      },
      "sign(uint256)": {
        "details": "Callable by any account; only accounts that have signed the latest version of the agreement can submit new disputable actions.     Initialization check is implicitly provided by `_settingId < nextSettingId`, as valid settings can only be created after initialization.",
        "params": {
          "_settingId": "Last setting ID the user is agreeing with"
        }
      },
      "submitEvidence(uint256,bytes,bool)": {
        "details": "Only callable by the action submitter or challenger.     Can be called as many times as desired until the dispute is over.     Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.",
        "params": {
          "_disputeId": "Identification number of the dispute on the arbitrator",
          "_evidence": "Evidence data to be submitted",
          "_finished": "Whether the evidence submitter is now finished submitting evidence"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Query if a contract implements a certain interface",
        "params": {
          "_interfaceId": "The interface identifier being queried, as specified in ERC-165"
        },
        "return": "True if the contract implements the requested interface and if its not 0xffffffff, false otherwise"
      },
      "syncAppFeesCashier()": {
        "details": "The app fees cashier address is being cached in the contract to save gas.     This can be called permission-lessly to allow any account to re-sync the cashier when changed by the arbitrator.     Initialization check is implicitly provided by `_getSetting()`, as valid settings can only be created after initialization."
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "activate(address,address,uint64,uint256,uint256)": {
        "notice": "Activate Disputable app `_disputableAddress`"
      },
      "canPerform(address,address,bytes32,uint256[])": {
        "notice": "Tells whether an address has already signed the Agreement"
      },
      "challengeAction(uint256,uint256,bool,bytes)": {
        "notice": "Challenge action #`_actionId`"
      },
      "changeCollateralRequirement(address,address,uint64,uint256,uint256)": {
        "notice": "Change `_disputable`'s collateral requirements"
      },
      "changeSetting(address,bool,string,bytes)": {
        "notice": "Update Agreement to title \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator`"
      },
      "closeAction(uint256)": {
        "notice": "Close action #`_actionId`"
      },
      "closeEvidencePeriod(uint256)": {
        "notice": "Close evidence submission period for dispute #`_disputeId`"
      },
      "deactivate(address)": {
        "notice": "Deactivate Disputable app `_disputable`"
      },
      "disputeAction(uint256,bool)": {
        "notice": "Dispute challenged action #`_actionId`, raising it to the arbitrator"
      },
      "initialize(address,bool,string,bytes,address)": {
        "notice": "Initialize Agreement for \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator` and staking factory `_factory`"
      },
      "newAction(uint256,bytes,address)": {
        "notice": "Register action #`_disputableActionId` from disputable `msg.sender` for submitter `_submitter` with context `_context`"
      },
      "rule(uint256,uint256)": {
        "notice": "Rule the action associated to dispute #`_disputeId` with ruling `_ruling`"
      },
      "settleAction(uint256)": {
        "notice": "Settle challenged action #`_actionId`, accepting the settlement offer"
      },
      "sign(uint256)": {
        "notice": "Sign the agreement up-to setting #`_settingId`"
      },
      "submitEvidence(uint256,bytes,bool)": {
        "notice": "Submit evidence for dispute #`_disputeId`"
      },
      "syncAppFeesCashier()": {
        "notice": "Sync app fees cashier address"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      }
    }
  }
}